% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/inversionDistance.R
\name{inversionDistance}
\alias{inversionDistance}
\title{Inversion Distance}
\usage{
inversionDistance(x)
}
\arguments{
\item{x}{Either a GBreaks object or a signed permutation vector.
If \code{x} is a GBreaks object, a permutation vector will be extracted
using \code{\link{permutationVector}}.}
}
\value{
An integer: the minimal number of inversions needed to sort the permutation.
}
\description{
Computes the minimal number of inversions required to sort a signed permutation
using the Hannenhalli and Pevzner algorithm.
}
\details{
This function uses several internal helper functions (e.g., \code{extendedPermutation},
\code{breakpoint_graph}, \code{hurdles_count}, \code{superhurdles_count}, and others) to
compute properties of the breakpoint graph and identify cycles, hurdles and superhurdles.
It also depends on \code{permutationVector()}, which is defined in another .R file.

This algorithm was designed to work in \emph{a single, linear chromosome alignment}.
Although the function still works if the GBreaks object involves more than one chromosome,
the returned value for the minimal number of inversions will imply in non-usual inversions
if different chromosomes have orthologous regions.
}
\examples{
\dontrun{
# Example using a permutation vector directly
# Suppose we want to sort the permutation p = c(1, 3, -2, 4)
inversionDistance(c(1, 3, -2, 4))

# Example using a GBreaks object
gr         <- GRanges(c("A:10-19", "A:20-29", "A:30-39", "A:40-49", "A:50-59", "A:60-69"))
strand(gr) <- c(            "+"  ,     "-"  ,     "-"  ,     "-"  ,     "+"  ,     "+"   )
gr$query   <- GRanges(c("A:10-19", "A:30-39", "A:20-29", "A:40-49", "A:60-69", "A:50-59"))
gb         <- GBreaks(gr)
inversionDistance(gb)}

}
\seealso{
\code{\link{permutationVector}} for generating the permutation vector.
}
\author{
Bruna Fistarol
}
