[{"path":"https://oist.github.io/GenomicBreaks/articles/GenomicBreaks.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Introduction to GenomicBreaks","text":"GenomicBreaks R package contains tools visualising analysing characteristics associated breakpoints pairs genomes.","code":""},{"path":"https://oist.github.io/GenomicBreaks/articles/GenomicBreaks.html","id":"load-pacakges","dir":"Articles","previous_headings":"Introduction","what":"Load pacakges","title":"Introduction to GenomicBreaks","text":"loading GenomicBreaks, GenomicRanges package automatically loaded . load ggplot2 want customise output plotting functions GenomicBreaks. use yeast data example. genome Saccharomyces cerevisiae available Bioconductor let’s load BSgenome package. loading Scerevisiae object invisibly exported.","code":"library('GenomicBreaks') |> suppressPackageStartupMessages() library('ggplot2') library(\"BSgenome.Scerevisiae.UCSC.sacCer3\") |> suppressPackageStartupMessages()"},{"path":"https://oist.github.io/GenomicBreaks/articles/GenomicBreaks.html","id":"example-data","dir":"Articles","previous_headings":"Introduction","what":"Example data","title":"Introduction to GenomicBreaks","text":"package contains example data files representing alignment two closely related Saccharomyces yeast genomes, two distantly related homologous chromosomes Sordariomycetes filamentous fungi.","code":""},{"path":"https://oist.github.io/GenomicBreaks/articles/GenomicBreaks.html","id":"saccharomyces-cerevisiae-s--paradoxus","dir":"Articles","previous_headings":"Introduction > Example data","what":"Saccharomyces cerevisiae – S. paradoxus","title":"Introduction to GenomicBreaks","text":"Alignment Saccharomyces paradoxus genome version ASM207905v1 SacCer3 reference genome S. cerevisiae, produced Nextflow pairwise alignment pipeline converted GFF3 format maf-convert gff -J 1000000 command LAST package. Note since GenomicBreaks can also load alignments MAF format directly, (see load_genomic_breaks()) usually need convert pipeline output GFF3 format.","code":"exdata_Sac <- system.file(\"extdata/SacCer3__SacPar.gff3.gz\", package = \"GenomicBreaks\")"},{"path":"https://oist.github.io/GenomicBreaks/articles/GenomicBreaks.html","id":"neurospora-crassa-chromosome-iii-podospora-comata-chromosome-7","dir":"Articles","previous_headings":"Introduction > Example data","what":"Neurospora crassa chromosome III – Podospora comata chromosome 7","title":"Introduction to GenomicBreaks","text":"Alignment Neurospora crassa genome version NC12 downloaded ENSEMBL 52, Podospora comata genome version ASM1735489v1 downloaded GenBank, produce commands . alignment filtered reduce size complexity example data, retaining matches chromosome III chromosome 7 (CP071499).","code":"exdata_Neu <- system.file(\"extdata/NeuCra__PodCom.III__7.gff3.gz\", package = \"GenomicBreaks\")"},{"path":"https://oist.github.io/GenomicBreaks/articles/GenomicBreaks.html","id":"gbreaks-objects","dir":"Articles","previous_headings":"","what":"GBreaks objects","title":"Introduction to GenomicBreaks","text":"Pairwise genome alignments loaded GBreaks() objects wrap GRanges class. convention, write query genome (one provided FASTA file) aligned target genome (one indexed aligner). target genome (left) main part object, query genome information (right) contained metadata columns (mcols) structure. Information contig scaffold length optionaly loaded BSgenome objects, seqinfo data extracted passed GRanges. convention, strand information alignment held target GRanges, query GRanges strandless. objects sorted seqname first.","code":"gb <- load_genomic_breaks(exdata_Sac, Scerevisiae) gb ## GBreaks object with 505 ranges and 2 metadata columns: ##         seqnames      ranges strand |     score                   query ##            <Rle>   <IRanges>  <Rle> | <numeric>               <GRanges> ##     [1]     chrI  5860-10010      + |     10609  NC_047487.1:8723-12716 ##     [2]     chrI 11157-11782      + |      1253 NC_047487.1:13035-13680 ##     [3]     chrI 25371-26528      + |      3651 NC_047487.1:15380-16537 ##     [4]     chrI 26849-29699      + |      6130 NC_047487.1:17263-20175 ##     [5]     chrI 29937-30607      + |       767 NC_047487.1:20203-20866 ##     ...      ...         ...    ... .       ...                     ... ##   [501]     chrM 67039-67870      + |      1441   NC_018044.1:7758-8439 ##   [502]     chrM 68205-68580      + |       830   NC_018044.1:8783-9180 ##   [503]     chrM 69178-76168      + |     14528  NC_018044.1:9650-16261 ##   [504]     chrM 77356-80022      + |      8066 NC_018044.1:53206-55865 ##   [505]     chrM 80919-85779      + |      6712 NC_018044.1:57885-61592 ##   ------- ##   seqinfo: 17 sequences (1 circular) from sacCer3 genome gb$query ## GRanges object with 505 ranges and 0 metadata columns: ##            seqnames      ranges strand ##               <Rle>   <IRanges>  <Rle> ##     [1] NC_047487.1  8723-12716      * ##     [2] NC_047487.1 13035-13680      * ##     [3] NC_047487.1 15380-16537      * ##     [4] NC_047487.1 17263-20175      * ##     [5] NC_047487.1 20203-20866      * ##     ...         ...         ...    ... ##   [501] NC_018044.1   7758-8439      * ##   [502] NC_018044.1   8783-9180      * ##   [503] NC_018044.1  9650-16261      * ##   [504] NC_018044.1 53206-55865      * ##   [505] NC_018044.1 57885-61592      * ##   ------- ##   seqinfo: 17 sequences from an unspecified genome; no seqlengths # No BSgenome available for N. crassa and P. comata. # This data does not contain match_part entries, so set the type parameter. gb_Neu <- load_genomic_breaks(exdata_Neu, type = \"match\")"},{"path":"https://oist.github.io/GenomicBreaks/articles/GenomicBreaks.html","id":"maniuplation-of-gbreaks-objects-with-plyranges","dir":"Articles","previous_headings":"GBreaks objects","what":"Maniuplation of GBreaks objects with plyranges","title":"Introduction to GenomicBreaks","text":"plyranges Bioconductor package easy manipulate GBreaks objects, particular filtering features query genome. package automatically installed; may need . See vignette plyranges details.","code":"# BiocManager::install('plyranges')  # Subset for chrI on the target genome. gb |> plyranges::filter(seqnames == \"chrI\") ## GBreaks object with 22 ranges and 2 metadata columns: ##        seqnames        ranges strand |     score                     query ##           <Rle>     <IRanges>  <Rle> | <numeric>                 <GRanges> ##    [1]     chrI    5860-10010      + |     10609    NC_047487.1:8723-12716 ##    [2]     chrI   11157-11782      + |      1253   NC_047487.1:13035-13680 ##    [3]     chrI   25371-26528      + |      3651   NC_047487.1:15380-16537 ##    [4]     chrI   26849-29699      + |      6130   NC_047487.1:17263-20175 ##    [5]     chrI   29937-30607      + |       767   NC_047487.1:20203-20866 ##    ...      ...           ...    ... .       ...                       ... ##   [18]     chrI 197472-198417      + |       644 NC_047487.1:187015-188000 ##   [19]     chrI 198484-200975      + |      9880 NC_047487.1:192875-195376 ##   [20]     chrI 200976-204211      + |     11801 NC_047487.1:195559-198812 ##   [21]     chrI 205647-208058      + |      8709 NC_047494.1:515228-517518 ##   [22]     chrI 224773-227362      + |     11047 NC_047487.1:224711-227317 ##   ------- ##   seqinfo: 17 sequences (1 circular) from sacCer3 genome # Subset for NC_047487.1 on the query genome gb |> plyranges::filter(seqnames(query) == \"NC_047487.1\") ## GBreaks object with 24 ranges and 2 metadata columns: ##        seqnames        ranges strand |     score                     query ##           <Rle>     <IRanges>  <Rle> | <numeric>                 <GRanges> ##    [1]     chrI    5860-10010      + |     10609    NC_047487.1:8723-12716 ##    [2]     chrI   11157-11782      + |      1253   NC_047487.1:13035-13680 ##    [3]     chrI   25371-26528      + |      3651   NC_047487.1:15380-16537 ##    [4]     chrI   26849-29699      + |      6130   NC_047487.1:17263-20175 ##    [5]     chrI   29937-30607      + |       767   NC_047487.1:20203-20866 ##    ...      ...           ...    ... .       ...                       ... ##   [20]     chrI 200976-204211      + |     11801 NC_047487.1:195559-198812 ##   [21]     chrI 224773-227362      + |     11047 NC_047487.1:224711-227317 ##   [22]   chrVII 402974-403256      + |       730 NC_047487.1:179771-180020 ##   [23]  chrVIII 527711-528802      + |      3617 NC_047487.1:202798-203906 ##   [24]  chrVIII 530396-533532      + |      6424 NC_047487.1:205275-208524 ##   ------- ##   seqinfo: 17 sequences (1 circular) from sacCer3 genome # Add or modify columns on the fly gb |> plyranges::mutate(\"Width\" = width) |> head(3) ## GBreaks object with 3 ranges and 3 metadata columns: ##       seqnames      ranges strand |     score                   query     Width ##          <Rle>   <IRanges>  <Rle> | <numeric>               <GRanges> <integer> ##   [1]     chrI  5860-10010      + |     10609  NC_047487.1:8723-12716      4151 ##   [2]     chrI 11157-11782      + |      1253 NC_047487.1:13035-13680       626 ##   [3]     chrI 25371-26528      + |      3651 NC_047487.1:15380-16537      1158 ##   ------- ##   seqinfo: 17 sequences (1 circular) from sacCer3 genome gb |> plyranges::mutate(\"score\" = width) |> head(3) ## GBreaks object with 3 ranges and 2 metadata columns: ##       seqnames      ranges strand |     score                   query ##          <Rle>   <IRanges>  <Rle> | <integer>               <GRanges> ##   [1]     chrI  5860-10010      + |      4151  NC_047487.1:8723-12716 ##   [2]     chrI 11157-11782      + |       626 NC_047487.1:13035-13680 ##   [3]     chrI 25371-26528      + |      1158 NC_047487.1:15380-16537 ##   ------- ##   seqinfo: 17 sequences (1 circular) from sacCer3 genome # Etc…"},{"path":"https://oist.github.io/GenomicBreaks/articles/GenomicBreaks.html","id":"subsetting-with-core-bioconductor-functions","dir":"Articles","previous_headings":"GBreaks objects","what":"Subsetting with core Bioconductor functions","title":"Introduction to GenomicBreaks","text":"core Bioconductor functions GenomicRanges package adapted work GBreaks objects. ?%% operator returns TRUE FALSE value per element first argument match second argument. toy example: ?subsetByOverlaps, one match either target query genome enough.","code":"gb[4:5] %in% gb ## [1] TRUE TRUE gb |> subsetByOverlaps(GRanges(\"chrI:200000-240000\")) ## GBreaks object with 4 ranges and 2 metadata columns: ##       seqnames        ranges strand |     score                     query ##          <Rle>     <IRanges>  <Rle> | <numeric>                 <GRanges> ##   [1]     chrI 198484-200975      + |      9880 NC_047487.1:192875-195376 ##   [2]     chrI 200976-204211      + |     11801 NC_047487.1:195559-198812 ##   [3]     chrI 205647-208058      + |      8709 NC_047494.1:515228-517518 ##   [4]     chrI 224773-227362      + |     11047 NC_047487.1:224711-227317 ##   ------- ##   seqinfo: 17 sequences (1 circular) from sacCer3 genome gb |> subsetByOverlaps(GBreaks( target = GRanges(\"chrI:200000-240000\")                               ,  query = GRanges(\"NC_047494.1:200000-800000\"))) ## GBreaks object with 14 ranges and 2 metadata columns: ##        seqnames        ranges strand |     score                     query ##           <Rle>     <IRanges>  <Rle> | <numeric>                 <GRanges> ##    [1]     chrI 198484-200975      + |      9880 NC_047487.1:192875-195376 ##    [2]     chrI 200976-204211      + |     11801 NC_047487.1:195559-198812 ##    [3]     chrI 205647-208058      + |      8709 NC_047494.1:515228-517518 ##    [4]     chrI 224773-227362      + |     11047 NC_047487.1:224711-227317 ##    [5]  chrVIII 214336-237947      + |     98269 NC_047494.1:199224-222890 ##    ...      ...           ...    ... .       ...                       ... ##   [10]  chrVIII 392227-463918      + |    286060 NC_047494.1:377750-449530 ##   [11]  chrVIII 463919-466794      + |     11508 NC_047494.1:449874-452585 ##   [12]  chrVIII 466808-520394      + |    223091 NC_047494.1:452922-506473 ##   [13]  chrVIII 520644-523428      + |      5768 NC_047494.1:506784-509589 ##   [14]  chrVIII 523430-526473      + |      5029 NC_047494.1:509966-512985 ##   ------- ##   seqinfo: 17 sequences (1 circular) from sacCer3 genome"},{"path":"https://oist.github.io/GenomicBreaks/articles/GenomicBreaks.html","id":"arms","dir":"Articles","previous_headings":"GBreaks objects","what":"Arms","title":"Introduction to GenomicBreaks","text":"positions centromeres known, annotation file can crafted indicate coordinates short long arms, function flagLongShort() can used transfer annotation GBreaks object.","code":"annot <- GRanges(c(\"chrI:1-151465\", \"chrI:151582-230218\")) annot$Type <- c(\"short\", \"long\") flagLongShort(gb, annot) ## GBreaks object with 505 ranges and 3 metadata columns: ##         seqnames      ranges strand |     score                   query ##            <Rle>   <IRanges>  <Rle> | <numeric>               <GRanges> ##     [1]     chrI  5860-10010      + |     10609  NC_047487.1:8723-12716 ##     [2]     chrI 11157-11782      + |      1253 NC_047487.1:13035-13680 ##     [3]     chrI 25371-26528      + |      3651 NC_047487.1:15380-16537 ##     [4]     chrI 26849-29699      + |      6130 NC_047487.1:17263-20175 ##     [5]     chrI 29937-30607      + |       767 NC_047487.1:20203-20866 ##     ...      ...         ...    ... .       ...                     ... ##   [501]     chrM 67039-67870      + |      1441   NC_018044.1:7758-8439 ##   [502]     chrM 68205-68580      + |       830   NC_018044.1:8783-9180 ##   [503]     chrM 69178-76168      + |     14528  NC_018044.1:9650-16261 ##   [504]     chrM 77356-80022      + |      8066 NC_018044.1:53206-55865 ##   [505]     chrM 80919-85779      + |      6712 NC_018044.1:57885-61592 ##              Arm ##         <factor> ##     [1]    short ##     [2]    short ##     [3]    short ##     [4]    short ##     [5]    short ##     ...      ... ##   [501]       NA ##   [502]       NA ##   [503]       NA ##   [504]       NA ##   [505]       NA ##   ------- ##   seqinfo: 17 sequences (1 circular) from sacCer3 genome"},{"path":[]},{"path":"https://oist.github.io/GenomicBreaks/articles/GenomicBreaks.html","id":"synteny-index","dir":"Articles","previous_headings":"GBreaks objects > Measures of distance","what":"Synteny index","title":"Introduction to GenomicBreaks","text":"Ad-hoc index measuring extent scaffold target genome mostly aligned single scaffold query genome. See ?synteny_index details. One limitation use index requires least query genome complete chromosome assembly.","code":"synteny_index(gb) ## [1] 0.9954872 synteny_index(swap(gb)) ## [1] 0.9954982"},{"path":"https://oist.github.io/GenomicBreaks/articles/GenomicBreaks.html","id":"correlation","dir":"Articles","previous_headings":"GBreaks objects > Measures of distance","what":"Correlation","title":"Introduction to GenomicBreaks","text":"Ad-hoc index measuring correlation coordinates syntenic alignments scaffolds target genome best match query genome. See ?correlation_index details. index robust presence uncollapsed haplotypes query genome.","code":"correlation_index(gb) ## [1] 0.9942222 correlation_index(swap(gb)) ## [1] 0.9946129 correlation_index(gb_Neu) ## [1] -0.7143233"},{"path":"https://oist.github.io/GenomicBreaks/articles/GenomicBreaks.html","id":"gene-order-conservation","dir":"Articles","previous_headings":"GBreaks objects > Measures of distance","what":"Gene Order Conservation","title":"Introduction to GenomicBreaks","text":"GOC() function calcluates Gene Order Conservation number defined Rocha (2003, https://doi.org/10.1016/j.tig.2003.09.011) “average number orthologues consecutive orthologue co-occurs close genome. varies 0 (co-occurrence) 1 (complete gene order conservation)”. Note calculating GOC whole-genome alignments expected produce meaningful results, example just show computation possible. function useful comparing position orthologues, represented GBreaks object.","code":"GOC(gb) ## [1] 0.9227557 GOC(swap(gb)) ## [1] 0.9123173 GOC(gb_Neu) ## [1] 0.504298"},{"path":"https://oist.github.io/GenomicBreaks/articles/GenomicBreaks.html","id":"strand-randomisation-index","dir":"Articles","previous_headings":"GBreaks objects > Measures of distance","what":"Strand randomisation index","title":"Introduction to GenomicBreaks","text":"?strand_randomisation_index tends towards zero within feature target genome many bases aligned plus minus strands. tends towards 1 within feature bases aligned strand.","code":"strand_randomisation_index(gb) ## [1] 0.989879 strand_randomisation_index(gb_Neu) ## [1] 0.01680228"},{"path":"https://oist.github.io/GenomicBreaks/articles/GenomicBreaks.html","id":"coalescing-alignments","dir":"Articles","previous_headings":"GBreaks objects","what":"Coalescing alignments","title":"Introduction to GenomicBreaks","text":"Large syntenic regions can often appear cluttered alignment breaks, spanning just basepairs. either artefact (instance case incomplete purge haplotypes) true breakpoint. algorithm coalesce_contigs() used produce new GRanges object fewer alignment breaks coalescing alignments separated short (user specified) distances. distance need agreeable target query genome order coalescion happen. example, coalescing gaps less 500 basepairs gb alignment: resulting GBreaks object far fewer alignments therefore far fewer alignment stops. algorithm initial step alignment stop filtering, goal reduced number alignment stops high probability breakpoints.","code":"coa <- coalesce_contigs(gb) length(gb) ## [1] 505 length(coa) ## [1] 88"},{"path":[]},{"path":"https://oist.github.io/GenomicBreaks/articles/GenomicBreaks.html","id":"plotting-alignments-versus-plotting-coalesced-regions","dir":"Articles","previous_headings":"GBreaks objects > Genome plots with genoPlotR","what":"Plotting alignments versus plotting coalesced regions","title":"Introduction to GenomicBreaks","text":"visualise synteny clearer plot coalseced objects.","code":"plotApairOfChrs(gb,  \"chrI\", main = \"S. cerevisiae / S. paradoxus\") plotApairOfChrs(coa, \"chrI\", main = \"S. cerevisiae / S. paradoxus\")"},{"path":"https://oist.github.io/GenomicBreaks/articles/GenomicBreaks.html","id":"flipping-a-chromosome","dir":"Articles","previous_headings":"GBreaks objects > Genome plots with genoPlotR","what":"Flipping a chromosome","title":"Introduction to GenomicBreaks","text":"genome sequences N. crassa P. comata, homologous chromosomes III 7 assembled reverse orientations. possible “reverse-complement” sequence feature ?reverse function GenomicBreaks. reverse-complement sequence, one needs know length. information available seqlengths slot object, GenomicBreaks function ?forceSeqLengths can used estimate based coordinate distal alignment.","code":"plotApairOfChrs(gb_Neu, main = \"Neurospora crassa chrIII / Podospora comata chr7\") gb_Neu |> forceSeqLengths() |> reverse(query = TRUE) |>   plotApairOfChrs(main = \"Neurospora crassa chrIII / Podospora comata chr7 (rev-complemented)\")"},{"path":"https://oist.github.io/GenomicBreaks/articles/GenomicBreaks.html","id":"oxford-dot-plots","dir":"Articles","previous_headings":"GBreaks objects","what":"“Oxford” dot plots","title":"Introduction to GenomicBreaks","text":"function makeOxfordPlots() outputs “Oxford” macrosynteny plots sequence levels merged.   plots ggplot2 objects can customised. Also, one sequence levels target query genomes, name displayed, addition numeric scales show meaningful coordinates.  Pass type = 'none' receive ggplot object layer, can customise wish.","code":"makeOxfordPlots(gb) makeOxfordPlots(gb_Neu, col = \"strand\") +   ggtitle(\"N. crassa chrIII vs P. comata chr7 “Oxford” plot\") makeOxfordPlots(gb |> plyranges::filter(seqnames        == \"chrI\",                                         seqnames(query) == \"NC_047487.1\")) +   scale_x_continuous() + scale_y_continuous() +   theme_bw() +   theme(legend.position=\"none\") +   ggtitle(\"sacCer3 vs sacPar “Oxford” plot\") ## Scale for x is already present. ## Adding another scale for x, which will replace the existing scale. ## Scale for y is already present. ## Adding another scale for y, which will replace the existing scale."},{"path":"https://oist.github.io/GenomicBreaks/articles/GenomicBreaks.html","id":"genomic-sequences","dir":"Articles","previous_headings":"GBreaks objects","what":"Genomic sequences","title":"Introduction to GenomicBreaks","text":"can retrieve genomic sequences ranges GBreaks objects provided BSgenome packages available indicated load time.","code":"getSeq(gb) ## DNAStringSet object of length 505: ##        width seq ##   [1]   4151 GTTTAGAATACTAGAATGATAACTGCATTCGG...TTTGCATCTTGGCTGCAAAGAAGAATGAATCG ##   [2]    626 TTACAAACTTTATGTTTTTAGGTGTATTTGCA...CTTGGTGTTGCCAGTTTCGGATACAGAAACAA ##   [3]   1158 AGAAGATGACAAACTGGATGAGATGGCAGTAG...ACAATGATGGTCTCATCAGTTGGCAAACCATT ##   [4]   2851 TCCATGGCTCAGTTGTAGTTATGGCAGTAGTG...ACAATGAAAATCAGTTCATGGAATAGTTGCCT ##   [5]    671 AAATCATTGACAGGGCATGAGTTACGTCAATC...TCAAGGCATTTATCGTTCAAAATGGCGATCAT ##   ...    ... ... ## [501]    832 TATATATTATGTATAAACAATAGAGAATATTG...ATATTATAAATATATATATATATATAAATATT ## [502]    376 TATATATTATTAATATATTAAATTTTATAATA...ATTAATTAATATTTTATAATAAATAAATAAAA ## [503]   6991 TTATTATTATATTTTTTTTAATAAAGGAAAAT...CTTTTAATAATATTCTTTTATTCTTTATTATT ## [504]   2667 TATATATTATGTATTATTATATAAATATATAT...TATACGTAGTCTTCTACTGATGAGGAGTCTAA ## [505]   4861 AAAATAAAAATATATATATATATATAAATGAT...GAAATATGCTTAATTATAATATAATATCCATA"},{"path":[]},{"path":"https://oist.github.io/GenomicBreaks/articles/GenomicBreaks.html","id":"definitions","dir":"Articles","previous_headings":"GBreaks objects > Trivial translocations","what":"Definitions","title":"Introduction to GenomicBreaks","text":"Remember working one--one alignments. Therefore deletions, insertions consequence copy number variations, aligned regions. Nevertheless, can detect translocations one chromosomal region another. define alignment pairs interrupt colinearity two pairs, inversions.","code":""},{"path":"https://oist.github.io/GenomicBreaks/articles/GenomicBreaks.html","id":"representation","dir":"Articles","previous_headings":"GBreaks objects > Trivial translocations","what":"Representation","title":"Introduction to GenomicBreaks","text":"translocation : represented :  See vignette(\"StructuralVariants\", package = \"GenomicBreaks\") examples translocations. Note also without outgroup possible know genome move happened.","code":"┌──────────────┬──────────────┬──────────────┐ │ chrA:101-200 │ chrA:201-300 │ chrA:301-400 │ (Target genome) └──────────────┴──────────────┴──────────────┘       +               +             +         (Alignment direction) ┌──────────────┬──────────────┬──────────────┐ │ chrB:101-200 │ chrC:201-300 │ chrB:301-400 │ (Query genome) └──────────────┴──────────────┴──────────────┘ exampleTranslocation ## GBreaks object with 3 ranges and 1 metadata column: ##       seqnames    ranges strand |        query ##          <Rle> <IRanges>  <Rle> |    <GRanges> ##   [1]     chrA   100-200      + | chrB:100-200 ##   [2]     chrA   201-300      + | chrC:201-300 ##   [3]     chrA   301-400      + | chrB:301-400 ##   ------- ##   seqinfo: 1 sequence from an unspecified genome plotApairOfChrs(exampleTranslocation)"},{"path":"https://oist.github.io/GenomicBreaks/articles/GenomicBreaks.html","id":"detection","dir":"Articles","previous_headings":"GBreaks objects > Trivial translocations","what":"Detection","title":"Introduction to GenomicBreaks","text":"","code":"flagTranslocations(exampleTranslocation) ## GBreaks object with 3 ranges and 2 metadata columns: ##       seqnames    ranges strand |        query   tra ##          <Rle> <IRanges>  <Rle> |    <GRanges> <Rle> ##   [1]     chrA   100-200      + | chrB:100-200  TRUE ##   [2]     chrA   201-300      + | chrC:201-300 FALSE ##   [3]     chrA   301-400      + | chrB:301-400 FALSE ##   ------- ##   seqinfo: 1 sequence from an unspecified genome showTranslocations(flagTranslocations(coa)) ## GBreaks object with 32 ranges and 3 metadata columns: ##      seqnames        ranges strand |                     query     score   tra ##         <Rle>     <IRanges>  <Rle> |                 <GRanges> <integer> <Rle> ##    1     chrI   5860-184523      + |   NC_047487.1:8723-169504    178664  TRUE ##    2     chrI 184533-184781      + | NC_047487.1:176430-176696       249  TRUE ##    3     chrI 185343-187499      + | NC_047487.1:170368-174401      2157 FALSE ##    4     chrI 187502-189195      + | NC_047487.1:177293-179769      1694 FALSE ##   12   chrIII 151968-168384      + | NC_047489.1:179584-195977     16417  TRUE ##   ..      ...           ...    ... .                       ...       ...   ... ##   64   chrXIV 777507-778973      - |   NC_047491.1:15022-16471      1467 FALSE ##   65   chrXIV 778976-781047      + | NC_047500.1:768251-770345      2072 FALSE ##   72    chrXV 855061-968849      + | NC_047501.1:832989-947263    113789  TRUE ##   73    chrXV 969434-970268      - | NC_047501.1:953757-954546       835 FALSE ##   74    chrXV 976413-980862      + | NC_047501.1:948879-953466      4450 FALSE ##   ------- ##   seqinfo: 17 sequences (1 circular) from sacCer3 genome plotApairOfChrs(coa, chrT = \"chrI\", xlim = gb2xlim(coa[2:4]))"},{"path":"https://oist.github.io/GenomicBreaks/articles/GenomicBreaks.html","id":"trivial-inversions","dir":"Articles","previous_headings":"GBreaks objects","what":"Trivial inversions","title":"Introduction to GenomicBreaks","text":"See vignette(\"StructuralVariants\", package = \"GenomicBreaks\") definitions.","code":""},{"path":"https://oist.github.io/GenomicBreaks/articles/GenomicBreaks.html","id":"number-of-trivial-inversions","dir":"Articles","previous_headings":"GBreaks objects > Trivial inversions","what":"Number of trivial inversions","title":"Introduction to GenomicBreaks","text":"inversions found coalescing colinear blocks situations + - + + - - + collapsing.","code":"flagInversions(coa) ## GBreaks object with 88 ranges and 3 metadata columns: ##        seqnames        ranges strand |                     query     score ##           <Rle>     <IRanges>  <Rle> |                 <GRanges> <integer> ##    [1]     chrI   5860-184523      + |   NC_047487.1:8723-169504    178664 ##    [2]     chrI 184533-184781      + | NC_047487.1:176430-176696       249 ##    [3]     chrI 185343-187499      + | NC_047487.1:170368-174401      2157 ##    [4]     chrI 187502-189195      + | NC_047487.1:177293-179769      1694 ##    [5]     chrI 189813-204211      + | NC_047487.1:180061-198812     14399 ##    ...      ...           ...    ... .                       ...       ... ##   [84]     chrM     6313-9737      - |   NC_018044.1:62854-65728      3425 ##   [85]     chrM   12828-50712      + |   NC_018044.1:22453-53190     37885 ##   [86]     chrM   56625-57960      + |   NC_018044.1:70280-71345      1336 ##   [87]     chrM   58008-76168      + |       NC_018044.1:1-16261     18161 ##   [88]     chrM   77356-85779      + |   NC_018044.1:53206-61592      8424 ##          inv ##        <Rle> ##    [1] FALSE ##    [2] FALSE ##    [3] FALSE ##    [4] FALSE ##    [5] FALSE ##    ...   ... ##   [84] FALSE ##   [85] FALSE ##   [86] FALSE ##   [87] FALSE ##   [88] FALSE ##   ------- ##   seqinfo: 17 sequences (1 circular) from sacCer3 genome showInversions(flagInversions(coa)) ## GBreaks object with 12 ranges and 3 metadata columns: ##      seqnames         ranges strand |                      query     score ##         <Rle>      <IRanges>  <Rle> |                  <GRanges> <integer> ##   10   chrIII   11513-149405      + |   NC_047489.1:41910-177147    137893 ##   11   chrIII  149866-151360      - |  NC_047489.1:178201-178974      1495 ##   12   chrIII  151968-168384      + |  NC_047489.1:179584-195977     16417 ##   34   chrVII   10270-110708      + |   NC_047493.1:11332-110230    100439 ##   35   chrVII  112352-121552      - |  NC_047493.1:111748-121071      9201 ##   ..      ...            ...    ... .                        ...       ... ##   39   chrVII  823466-828795      - |  NC_047493.1:792155-797486      5330 ##   40   chrVII 828909-1076119      + | NC_047493.1:799044-1046538    247211 ##   52     chrX   19114-354004      + |   NC_047496.1:12159-351096    334891 ##   53     chrX  355632-374591      - |  NC_047496.1:353062-371883     18960 ##   54     chrX  374938-727499      + |  NC_047496.1:373079-722743    352562 ##        inv ##      <Rle> ##   10  TRUE ##   11 FALSE ##   12 FALSE ##   34  TRUE ##   35 FALSE ##   ..   ... ##   39 FALSE ##   40 FALSE ##   52  TRUE ##   53 FALSE ##   54 FALSE ##   ------- ##   seqinfo: 17 sequences (1 circular) from sacCer3 genome showInversions(flagInversions(coa)) |> plyranges::slice(1:3)   |> plotApairOfChrs() showInversions(flagInversions(coa)) |> plyranges::slice(4:9)   |> plotApairOfChrs() showInversions(flagInversions(coa)) |> plyranges::slice(10:12) |> plotApairOfChrs()"},{"path":"https://oist.github.io/GenomicBreaks/articles/GenomicBreaks.html","id":"classification-of-the-genomic-regions-of-a-genome-by-alignment-properties-","dir":"Articles","previous_headings":"","what":"Classification of the genomic regions of a genome by alignment properties.","title":"Introduction to GenomicBreaks","text":"can classify aligned genomic regions isolated collinear, unaligned regions breakpoint bridge regions. bridge regions always flanked collinear alignments isolated alignments always flanked breakpoint regions.","code":"wgo <- wholeGenomeClassification(gb, coa) wgo ## GRanges object with 981 ranges and 1 metadata column: ##         seqnames      ranges strand |                type ##            <Rle>   <IRanges>  <Rle> |            <factor> ##     [1]     chrI  5860-10010      + | collinear alignment ##     [2]     chrI 10011-11156      + | bridge region       ##     [3]     chrI 11157-11782      + | collinear alignment ##     [4]     chrI 11783-25370      + | bridge region       ##     [5]     chrI 25371-26528      + | collinear alignment ##     ...      ...         ...    ... .                 ... ##   [977]     chrM 69178-76168      + | collinear alignment ##   [978]     chrM 76169-77355      * | breakpoint region   ##   [979]     chrM 77356-80022      + | collinear alignment ##   [980]     chrM 80023-80918      + | bridge region       ##   [981]     chrM 80919-85779      + | collinear alignment ##   ------- ##   seqinfo: 17 sequences (1 circular) from sacCer3 genome table(wgo$type) ##  ##  isolated alignment collinear alignment   breakpoint region       bridge region  ##                  46                 459                  70                 406"},{"path":"https://oist.github.io/GenomicBreaks/articles/StructuralVariants.html","id":"structural-variants","dir":"Articles","previous_headings":"","what":"Structural Variants","title":"Structural Variants","text":"GBreaks() objects provided lazy data convention name always start example.","code":""},{"path":[]},{"path":"https://oist.github.io/GenomicBreaks/articles/StructuralVariants.html","id":"definition","dir":"Articles","previous_headings":"Structural Variants > Colinearity","what":"Definition","title":"Structural Variants","text":"define structural variants patterns interruption colinearity genomes. Colinearity property pairs mapped regions.  Regions mapped reverse strands reverse order also colinear.  Regions reverse order, mapped opposite strands colinear.   example, syntenic chromosomes called chrA chrB, names matter.","code":"plotApairOfChrs(exampleColinear, main = \"Two colinear regions\") plotApairOfChrs(reverse(exampleColinear), main = \"Two colinear regions on different strands\") plotApairOfChrs(exampleNotColinear, main = \"Same strand but not colinear\") plotApairOfChrs(reverse(exampleNotColinear), main = \"Both on opposite strand but not colinear\")"},{"path":"https://oist.github.io/GenomicBreaks/articles/StructuralVariants.html","id":"technical-details","dir":"Articles","previous_headings":"Structural Variants > Colinearity","what":"Technical details","title":"Structural Variants","text":"Remember flagColinearAlignments() function puts flag first member pair, ordered sequence target genome. make sanity checks flagging functions also object containing three colinear mappings.","code":"flagColinearAlignments(exampleColinear) ## GBreaks object with 2 ranges and 2 metadata columns: ##       seqnames    ranges strand |        query  colinear ##          <Rle> <IRanges>  <Rle> |    <GRanges> <logical> ##   [1]     chrA   100-150      + | chrB:100-150      TRUE ##   [2]     chrA   251-300      + | chrB:251-300     FALSE ##   ------- ##   seqinfo: 1 sequence from an unspecified genome flagColinearAlignments(reverse(exampleColinear)) ## GBreaks object with 2 ranges and 2 metadata columns: ##       seqnames    ranges strand |        query  colinear ##          <Rle> <IRanges>  <Rle> |    <GRanges> <logical> ##   [1]     chrA   301-350      - | chrB:251-300      TRUE ##   [2]     chrA   451-501      - | chrB:100-150     FALSE ##   ------- ##   seqinfo: 1 sequence from an unspecified genome # Note the tolerance window flagColinearAlignments(exampleColinear, tol = 100) ## GBreaks object with 2 ranges and 2 metadata columns: ##       seqnames    ranges strand |        query  colinear ##          <Rle> <IRanges>  <Rle> |    <GRanges> <logical> ##   [1]     chrA   100-150      + | chrB:100-150     FALSE ##   [2]     chrA   251-300      + | chrB:251-300     FALSE ##   ------- ##   seqinfo: 1 sequence from an unspecified genome # Strandless mappings can also be colinear exampleColinear |> plyranges::mutate(strand = \"*\") |> flagColinearAlignments() ## GBreaks object with 2 ranges and 2 metadata columns: ##       seqnames    ranges strand |        query  colinear ##          <Rle> <IRanges>  <Rle> |    <GRanges> <logical> ##   [1]     chrA   100-150      * | chrB:100-150      TRUE ##   [2]     chrA   251-300      * | chrB:251-300     FALSE ##   ------- ##   seqinfo: 1 sequence from an unspecified genome flagColinearAlignments(exampleNotColinear) ## GBreaks object with 2 ranges and 2 metadata columns: ##       seqnames    ranges strand |        query  colinear ##          <Rle> <IRanges>  <Rle> |    <GRanges> <logical> ##   [1]     chrA   100-150      + | chrB:201-251     FALSE ##   [2]     chrA   251-300      + |  chrB:50-100     FALSE ##   ------- ##   seqinfo: 1 sequence from an unspecified genome flagColinearAlignments(exampleColinear3) ## GBreaks object with 3 ranges and 2 metadata columns: ##       seqnames    ranges strand |        query  colinear ##          <Rle> <IRanges>  <Rle> |    <GRanges> <logical> ##   [1]     chrA   100-200      + | chrB:100-200      TRUE ##   [2]     chrA   201-300      + | chrB:201-300      TRUE ##   [3]     chrA   301-400      + | chrB:301-400     FALSE ##   ------- ##   seqinfo: 1 sequence from an unspecified genome"},{"path":"https://oist.github.io/GenomicBreaks/articles/StructuralVariants.html","id":"limitation","dir":"Articles","previous_headings":"Structural Variants > Colinearity","what":"Limitation","title":"Structural Variants","text":"moment can study structural variants entirely contained aligned region, instance indel represented alignment gap.","code":""},{"path":[]},{"path":"https://oist.github.io/GenomicBreaks/articles/StructuralVariants.html","id":"trivial-inversions","dir":"Articles","previous_headings":"Structural Variants > Inversions","what":"Trivial inversions","title":"Structural Variants","text":"Trivial inversions triplets mapped regions colinear strand second one reversed. Note , like colinear patterns, flag put first mapping triplet.","code":"exampleInversion |> flagColinearAlignments() |> flagInversions() ## GBreaks object with 3 ranges and 3 metadata columns: ##       seqnames    ranges strand |        query  colinear   inv ##          <Rle> <IRanges>  <Rle> |    <GRanges> <logical> <Rle> ##   [1]     chrA   100-190      + | chrB:100-190     FALSE  TRUE ##   [2]     chrA   210-291      - | chrB:210-291     FALSE FALSE ##   [3]     chrA   301-400      + | chrB:301-400     FALSE FALSE ##   ------- ##   seqinfo: 1 sequence from an unspecified genome plotApairOfChrs(exampleInversion, main = \"An inverted region flanked by colinear regions\") plotApairOfChrs(reverse(exampleInversion), main = \"An inverted region flanked by colinear regions (opposite strands)\") # Removing the inversion restores colinearity exampleInversion[-2] |> flagColinearAlignments() ## GBreaks object with 2 ranges and 2 metadata columns: ##       seqnames    ranges strand |        query  colinear ##          <Rle> <IRanges>  <Rle> |    <GRanges> <logical> ##   [1]     chrA   100-190      + | chrB:100-190      TRUE ##   [2]     chrA   301-400      + | chrB:301-400     FALSE ##   ------- ##   seqinfo: 1 sequence from an unspecified genome # Flipping the inversion restores colinearity exampleInversion |> plyranges::mutate(strand = \"+\") |> flagColinearAlignments() ## GBreaks object with 3 ranges and 2 metadata columns: ##       seqnames    ranges strand |        query  colinear ##          <Rle> <IRanges>  <Rle> |    <GRanges> <logical> ##   [1]     chrA   100-190      + | chrB:100-190      TRUE ##   [2]     chrA   210-291      + | chrB:210-291      TRUE ##   [3]     chrA   301-400      + | chrB:301-400     FALSE ##   ------- ##   seqinfo: 1 sequence from an unspecified genome # Note the tolerance window flagInversions(exampleInversion, tol = 10) ## GBreaks object with 3 ranges and 2 metadata columns: ##       seqnames    ranges strand |        query   inv ##          <Rle> <IRanges>  <Rle> |    <GRanges> <Rle> ##   [1]     chrA   100-190      + | chrB:100-190 FALSE ##   [2]     chrA   210-291      - | chrB:210-291 FALSE ##   [3]     chrA   301-400      + | chrB:301-400 FALSE ##   ------- ##   seqinfo: 1 sequence from an unspecified genome"},{"path":"https://oist.github.io/GenomicBreaks/articles/StructuralVariants.html","id":"double-inversions","dir":"Articles","previous_headings":"Structural Variants > Inversions","what":"Double inversions","title":"Structural Variants","text":"Double inversions result two overlapping trivial inversions, detected different approach, implemented flagDoubleInversions() function. construct double inversion 3 steps: First, start 5 collinear ranges, invert ranges 2 3, invert ranges 3 4 (step 2). show triplet resulting double inversion, flanked two regions move.    story showing coalesced alignments.    Given double inversion example , history, can deduce coordinates inversions (pairs breakpoints), order took place.","code":"exampleColinear5 |> plotApairOfChrs(main = \"5 collinear ranges\") exampleInversion5uncollapsed |> plotApairOfChrs(main = \"Invert ranges 2 and 3\") exampleDoubleInversion1 |> plotApairOfChrs(main = \"Invert ranges 3 and 4 of the previous step\") exampleColinear5 |> coalesce_contigs() |> plotApairOfChrs() exampleInversion5uncollapsed |> coalesce_contigs() |> plotApairOfChrs() exampleDoubleInversion1 |> coalesce_contigs() |> plotApairOfChrs()"},{"path":"https://oist.github.io/GenomicBreaks/articles/StructuralVariants.html","id":"nested-inversions","dir":"Articles","previous_headings":"Structural Variants > Inversions","what":"Nested inversions","title":"Structural Variants","text":"?flagInversions algorithm detects simplest cases. order detect nested inversions, inner ones removed.","code":"exampleNestedInversions |> plotApairOfChrs() exampleNestedInversions |> flagInversions() ## GBreaks object with 5 ranges and 2 metadata columns: ##       seqnames    ranges strand |        query   inv ##          <Rle> <IRanges>  <Rle> |    <GRanges> <Rle> ##   [1]     chrA   100-190      + | chrA:100-190 FALSE ##   [2]     chrA   200-290      - | chrA:400-490  TRUE ##   [3]     chrA   300-390      + | chrA:300-390 FALSE ##   [4]     chrA   400-490      - | chrA:200-290 FALSE ##   [5]     chrA   500-590      + | chrA:500-590 FALSE ##   ------- ##   seqinfo: 1 sequence from an unspecified genome (flipped <- (exampleNestedInversions |> flagInversions() |> flipInversions())) ## GBreaks object with 5 ranges and 1 metadata column: ##       seqnames    ranges strand |        query ##          <Rle> <IRanges>  <Rle> |    <GRanges> ##   [1]     chrA   100-190      + | chrA:100-190 ##   [2]     chrA   200-290      - | chrA:400-490 ##   [3]     chrA   300-390      - | chrA:300-390 ##   [4]     chrA   400-490      - | chrA:200-290 ##   [5]     chrA   500-590      + | chrA:500-590 ##   ------- ##   seqinfo: 1 sequence from an unspecified genome flipped |> plotApairOfChrs() flipped |> coalesce_contigs() |> flagInversions() ## GBreaks object with 3 ranges and 3 metadata columns: ##       seqnames    ranges strand |        query     score   inv ##          <Rle> <IRanges>  <Rle> |    <GRanges> <integer> <Rle> ##   [1]     chrA   100-190      + | chrA:100-190        91  TRUE ##   [2]     chrA   200-490      - | chrA:200-490       291 FALSE ##   [3]     chrA   500-590      + | chrA:500-590        91 FALSE ##   ------- ##   seqinfo: 1 sequence from an unspecified genome"},{"path":"https://oist.github.io/GenomicBreaks/articles/StructuralVariants.html","id":"transolocations","dir":"Articles","previous_headings":"Structural Variants","what":"Transolocations","title":"Structural Variants","text":"region moved, inversion, translocation.  matter region moved minus strand","code":"exampleTranslocation |> flagColinearAlignments() |> flagInversions() ## GBreaks object with 3 ranges and 3 metadata columns: ##       seqnames    ranges strand |        query  colinear   inv ##          <Rle> <IRanges>  <Rle> |    <GRanges> <logical> <Rle> ##   [1]     chrA   100-200      + | chrB:100-200     FALSE FALSE ##   [2]     chrA   201-300      + | chrC:201-300     FALSE FALSE ##   [3]     chrA   301-400      + | chrB:301-400     FALSE FALSE ##   ------- ##   seqinfo: 1 sequence from an unspecified genome plotApairOfChrs(exampleTranslocation) exampleTranslocation2 |> flagColinearAlignments() |> flagInversions() ## GBreaks object with 3 ranges and 3 metadata columns: ##       seqnames    ranges strand |        query  colinear   inv ##          <Rle> <IRanges>  <Rle> |    <GRanges> <logical> <Rle> ##   [1]     chrA   100-200      + | chrB:100-200     FALSE FALSE ##   [2]     chrA   201-300      - | chrC:201-300     FALSE FALSE ##   [3]     chrA   301-400      + | chrB:301-400     FALSE FALSE ##   ------- ##   seqinfo: 1 sequence from an unspecified genome plotApairOfChrs(exampleTranslocation2)"},{"path":"https://oist.github.io/GenomicBreaks/articles/StructuralVariants.html","id":"insertions-deletions-indels","dir":"Articles","previous_headings":"Structural Variants","what":"Insertions / Deletions (indels)","title":"Structural Variants","text":"NOTE searching insertion/deletions make little sense one--one alignment unless maximal distance colinearity set meaningful value.","code":"exampleDeletion ## GBreaks object with 3 ranges and 1 metadata column: ##       seqnames    ranges strand |        query ##          <Rle> <IRanges>  <Rle> |    <GRanges> ##   [1]     chrA   100-200      + | chrB:100-200 ##   [2]     chrA   201-300      + | chrC:401-500 ##   [3]     chrA   301-400      + | chrB:201-300 ##   ------- ##   seqinfo: 1 sequence from an unspecified genome plotApairOfChrs(exampleDeletion) exampleInsertion ## GBreaks object with 3 ranges and 1 metadata column: ##       seqnames    ranges strand |        query ##          <Rle> <IRanges>  <Rle> |    <GRanges> ##   [1]     chrA   100-200      + | chrB:100-200 ##   [2]     chrA   201-300      + | chrB:301-400 ##   [3]     chrC   401-500      + | chrB:201-300 ##   ------- ##   seqinfo: 2 sequences from an unspecified genome plotApairOfChrs(exampleInsertion)"},{"path":"https://oist.github.io/GenomicBreaks/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Charlotte West. Author. Charles Plessy. Author, maintainer.","code":""},{"path":"https://oist.github.io/GenomicBreaks/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"West C, Plessy C (2024). GenomicBreaks: Pairwise Alignment Breakpoint Analysis. R package version 0.14.4,  https://github.com/oist/GenomicBreaks, https://oist.github.io/GenomicBreaks/.","code":"@Manual{,   title = {GenomicBreaks: Pairwise Alignment Breakpoint Analysis},   author = {Charlotte West and Charles Plessy},   year = {2024},   note = {R package version 0.14.4,  https://github.com/oist/GenomicBreaks},   url = {https://oist.github.io/GenomicBreaks/}, }"},{"path":[]},{"path":"https://oist.github.io/GenomicBreaks/index.html","id":"purpose","dir":"","previous_headings":"","what":"Purpose","title":"Pairwise Alignment Breakpoint Analysis","text":"GenomicBreaks R package using Bioconductor libraries analyse pairwise alignments whole genomes gene order scrambled evolution, like picture represents comparison homologous chromosomes two distantly related molds, N. crassa (chrIII) P. comata (chr7). package especially designed parse process alignment files produced pairwise genome alignment pipeline, capable import output pipelines well.","code":""},{"path":[]},{"path":"https://oist.github.io/GenomicBreaks/index.html","id":"install-the-package","dir":"","previous_headings":"Installation","what":"Install the package.","title":"Pairwise Alignment Breakpoint Analysis","text":"Bioconductor remotes already installed, following work. Add dependencies=TRUE like install packages needed build vignettes.","code":"Rscript -e 'remotes::install_github(\"oist/GenomicBreaks\", repos=BiocManager::repositories())'"},{"path":"https://oist.github.io/GenomicBreaks/index.html","id":"how-to-create-a-singularity-container-with-genomicbreaks-installed","dir":"","previous_headings":"Installation","what":"How to create a Singularity container with GenomicBreaks installed.","title":"Pairwise Alignment Breakpoint Analysis","text":"See Singularity reciepe file","code":"singularity build --fakeroot GenomicBreaks.sif Singularity.def"},{"path":"https://oist.github.io/GenomicBreaks/index.html","id":"genomicbreaks-in-brief","dir":"","previous_headings":"","what":"GenomicBreaks in brief:","title":"Pairwise Alignment Breakpoint Analysis","text":"pairwise alignment two genomes loaded GBreaks objects wrapping GRanges class. example: See “Get started” https://oist.github.io/GenomicBreaks details.","code":"GBreaks object with 505 ranges and 2 metadata columns:         seqnames      ranges strand |     score                   query            <Rle>   <IRanges>  <Rle> | <numeric>               <GRanges>     [1]     chrI  5860-10010      + |     10609  NC_047487.1:8723-12716     [2]     chrI 11157-11782      + |      1253 NC_047487.1:13035-13680     [3]     chrI 25371-26528      + |      3651 NC_047487.1:15380-16537     [4]     chrI 26849-29699      + |      6130 NC_047487.1:17263-20175     [5]     chrI 29937-30607      + |       767 NC_047487.1:20203-20866     ...      ...         ...    ... .       ...                     ...   [501]     chrM 67039-67870      + |      1441   NC_018044.1:7758-8439   [502]     chrM 68205-68580      + |       830   NC_018044.1:8783-9180   [503]     chrM 69178-76168      + |     14528  NC_018044.1:9650-16261   [504]     chrM 77356-80022      + |      8066 NC_018044.1:53206-55865   [505]     chrM 80919-85779      + |      6712 NC_018044.1:57885-61592   -------   seqinfo: 17 sequences (1 circular) from sacCer3 genome"},{"path":"https://oist.github.io/GenomicBreaks/reference/GBreaks-class.html","id":null,"dir":"Reference","previous_headings":"","what":"The GenomicBreaks class — GBreaks-class","title":"The GenomicBreaks class — GBreaks-class","text":"GBreaks class simple wrapper GRanges class.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/GBreaks-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The GenomicBreaks class — GBreaks-class","text":"Aligned sequences target genome represented main ranges GRanges object, counterparts query genome represented GRanges object sored metadata column query.","code":""},{"path":[]},{"path":"https://oist.github.io/GenomicBreaks/reference/GBreaks-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The GenomicBreaks class — GBreaks-class","text":"","code":"gb <- load_genomic_breaks(system.file(\"extdata/SacCer3__SacPar.gff3.gz\", package = \"GenomicBreaks\")) gb #> GBreaks object with 505 ranges and 2 metadata columns: #>         seqnames      ranges strand |     score                   query #>            <Rle>   <IRanges>  <Rle> | <numeric>               <GRanges> #>     [1]     chrI  5860-10010      + |     10609  NC_047487.1:8723-12716 #>     [2]     chrI 11157-11782      + |      1253 NC_047487.1:13035-13680 #>     [3]     chrI 25371-26528      + |      3651 NC_047487.1:15380-16537 #>     [4]     chrI 26849-29699      + |      6130 NC_047487.1:17263-20175 #>     [5]     chrI 29937-30607      + |       767 NC_047487.1:20203-20866 #>     ...      ...         ...    ... .       ...                     ... #>   [501]     chrM 67039-67870      + |      1441   NC_018044.1:7758-8439 #>   [502]     chrM 68205-68580      + |       830   NC_018044.1:8783-9180 #>   [503]     chrM 69178-76168      + |     14528  NC_018044.1:9650-16261 #>   [504]     chrM 77356-80022      + |      8066 NC_018044.1:53206-55865 #>   [505]     chrM 80919-85779      + |      6712 NC_018044.1:57885-61592 #>   ------- #>   seqinfo: 17 sequences from an unspecified genome; no seqlengths gb$query #> GRanges object with 505 ranges and 0 metadata columns: #>            seqnames      ranges strand #>               <Rle>   <IRanges>  <Rle> #>     [1] NC_047487.1  8723-12716      * #>     [2] NC_047487.1 13035-13680      * #>     [3] NC_047487.1 15380-16537      * #>     [4] NC_047487.1 17263-20175      * #>     [5] NC_047487.1 20203-20866      * #>     ...         ...         ...    ... #>   [501] NC_018044.1   7758-8439      * #>   [502] NC_018044.1   8783-9180      * #>   [503] NC_018044.1  9650-16261      * #>   [504] NC_018044.1 53206-55865      * #>   [505] NC_018044.1 57885-61592      * #>   ------- #>   seqinfo: 17 sequences from an unspecified genome; no seqlengths"},{"path":"https://oist.github.io/GenomicBreaks/reference/GBreaksToMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to binned matrix of hits — GBreaksToMatrix","title":"Convert to binned matrix of hits — GBreaksToMatrix","text":"Convert binned matrix hits","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/GBreaksToMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to binned matrix of hits — GBreaksToMatrix","text":"","code":"GBreaksToMatrix(gb, ntile = 1000)"},{"path":"https://oist.github.io/GenomicBreaks/reference/GBreaksToMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to binned matrix of hits — GBreaksToMatrix","text":"gb GenomicBreaks object. ntile number bins matrix.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/GBreaksToMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert to binned matrix of hits — GBreaksToMatrix","text":"matrix object.","code":""},{"path":[]},{"path":"https://oist.github.io/GenomicBreaks/reference/GBreaksToMatrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert to binned matrix of hits — GBreaksToMatrix","text":"","code":"m <- GBreaksToMatrix(exampleColinear5, ntile = 10) m #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]    0    0    0    0    0    0    0    0    0     0 #>  [2,]    0    1    1    1    0    0    0    0    0     0 #>  [3,]    0    1    1    1    0    0    0    0    0     0 #>  [4,]    0    1    1    1    1    0    0    0    0     0 #>  [5,]    0    0    0    1    1    1    1    0    0     0 #>  [6,]    0    0    0    0    1    1    1    0    0     0 #>  [7,]    0    0    0    0    1    1    1    1    1     0 #>  [8,]    0    0    0    0    0    0    1    1    1     0 #>  [9,]    0    0    0    0    0    0    1    1    1     1 #> [10,]    0    0    0    0    0    0    0    0    1     1 image(m)  makeOxfordPlots(exampleColinear5)"},{"path":"https://oist.github.io/GenomicBreaks/reference/GOC.html","id":null,"dir":"Reference","previous_headings":"","what":"Gene Order Conservation — GOC","title":"Gene Order Conservation — GOC","text":"Gene Order Conservation (GOC) number defined Rocha (2003) : “average number orthologues consecutive orthologue co-occurs close genome. varies 0 (co-occurrence) 1 (complete gene order conservation)”.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/GOC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gene Order Conservation — GOC","text":"","code":"GOC(gb, vicinity = 4, debug = FALSE)"},{"path":"https://oist.github.io/GenomicBreaks/reference/GOC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gene Order Conservation — GOC","text":"gb GBreaks object. vicinity far search neighbour orthologue. debug See .","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/GOC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gene Order Conservation — GOC","text":"Returns numeric value 0 1.  debug = TRUE, returns copy gb object additional columns showing details computation.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/GOC.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Gene Order Conservation — GOC","text":"Note calculating GOC whole-genome alignments expected produce meaningful results.  function useful comparing position orthologues, represented GBreaks object.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/GOC.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Gene Order Conservation — GOC","text":"Rocha, Eduardo P C. “DNA repeats lead accelerated loss gene order bacteria.” Trends genetics : TIG vol. 19,11 (2003): 600-3. doi:10.1016/j.tig.2003.09.011","code":""},{"path":[]},{"path":"https://oist.github.io/GenomicBreaks/reference/GOC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gene Order Conservation — GOC","text":"","code":"exampleColinear #> GBreaks object with 2 ranges and 1 metadata column: #>       seqnames    ranges strand |        query #>          <Rle> <IRanges>  <Rle> |    <GRanges> #>   [1]     chrA   100-150      + | chrB:100-150 #>   [2]     chrA   251-300      + | chrB:251-300 #>   ------- #>   seqinfo: 1 sequence from an unspecified genome GOC(exampleColinear) #> [1] 1  exampleTranslocation #> GBreaks object with 3 ranges and 1 metadata column: #>       seqnames    ranges strand |        query #>          <Rle> <IRanges>  <Rle> |    <GRanges> #>   [1]     chrA   100-200      + | chrB:100-200 #>   [2]     chrA   201-300      + | chrC:201-300 #>   [3]     chrA   301-400      + | chrB:301-400 #>   ------- #>   seqinfo: 1 sequence from an unspecified genome GOC(exampleTranslocation) #> [1] 0.5 GOC(exampleTranslocation, v=1) #> [1] 0  # GOC computation is strandless exampleInversion #> GBreaks object with 3 ranges and 1 metadata column: #>       seqnames    ranges strand |        query #>          <Rle> <IRanges>  <Rle> |    <GRanges> #>   [1]     chrA   100-190      + | chrB:100-190 #>   [2]     chrA   210-291      - | chrB:210-291 #>   [3]     chrA   301-400      + | chrB:301-400 #>   ------- #>   seqinfo: 1 sequence from an unspecified genome GOC(exampleInversion) #> [1] 1"},{"path":"https://oist.github.io/GenomicBreaks/reference/StructuralVariants.html","id":null,"dir":"Reference","previous_headings":"","what":"Structural Variants — StructuralVariants","title":"Structural Variants — StructuralVariants","text":"Concept examples structural variants test demonstration purpose","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/StructuralVariants.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Structural Variants — StructuralVariants","text":"GBreaks objects described details Structural Variants vignette, available command vignette(\"StructuralVariants\", package = \"GenomicBreaks\").","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/StructuralVariants.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Structural Variants — StructuralVariants","text":"variants represented ones can represented GBreaks object.  Short ones entirely contained aligned region, instance gap, covered","code":""},{"path":[]},{"path":"https://oist.github.io/GenomicBreaks/reference/StructuralVariants.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Structural Variants — StructuralVariants","text":"Charles Plessy","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/StructuralVariants.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Structural Variants — StructuralVariants","text":"","code":"exampleColinear #> GBreaks object with 2 ranges and 1 metadata column: #>       seqnames    ranges strand |        query #>          <Rle> <IRanges>  <Rle> |    <GRanges> #>   [1]     chrA   100-150      + | chrB:100-150 #>   [2]     chrA   251-300      + | chrB:251-300 #>   ------- #>   seqinfo: 1 sequence from an unspecified genome exampleNotColinear #> GBreaks object with 2 ranges and 1 metadata column: #>       seqnames    ranges strand |        query #>          <Rle> <IRanges>  <Rle> |    <GRanges> #>   [1]     chrA   100-150      + | chrB:201-251 #>   [2]     chrA   251-300      + |  chrB:50-100 #>   ------- #>   seqinfo: 1 sequence from an unspecified genome exampleColinear3 #> GBreaks object with 3 ranges and 1 metadata column: #>       seqnames    ranges strand |        query #>          <Rle> <IRanges>  <Rle> |    <GRanges> #>   [1]     chrA   100-200      + | chrB:100-200 #>   [2]     chrA   201-300      + | chrB:201-300 #>   [3]     chrA   301-400      + | chrB:301-400 #>   ------- #>   seqinfo: 1 sequence from an unspecified genome exampleColinear5 #> GBreaks object with 5 ranges and 1 metadata column: #>       seqnames    ranges strand |        query #>          <Rle> <IRanges>  <Rle> |    <GRanges> #>   [1]     chrA   100-190      + | chrB:100-190 #>   [2]     chrA   200-290      + | chrB:200-290 #>   [3]     chrA   300-390      + | chrB:300-390 #>   [4]     chrA   400-490      + | chrB:400-490 #>   [5]     chrA   500-590      + | chrB:500-590 #>   ------- #>   seqinfo: 1 sequence from an unspecified genome exampleInversion #> GBreaks object with 3 ranges and 1 metadata column: #>       seqnames    ranges strand |        query #>          <Rle> <IRanges>  <Rle> |    <GRanges> #>   [1]     chrA   100-190      + | chrB:100-190 #>   [2]     chrA   210-291      - | chrB:210-291 #>   [3]     chrA   301-400      + | chrB:301-400 #>   ------- #>   seqinfo: 1 sequence from an unspecified genome exampleInversion5uncollapsed #> GBreaks object with 5 ranges and 1 metadata column: #>       seqnames    ranges strand |        query #>          <Rle> <IRanges>  <Rle> |    <GRanges> #>   [1]     chrA   100-190      + | chrB:100-190 #>   [2]     chrA   200-290      - | chrB:300-390 #>   [3]     chrA   300-390      - | chrB:200-290 #>   [4]     chrA   400-490      + | chrB:400-490 #>   [5]     chrA   500-590      + | chrB:500-590 #>   ------- #>   seqinfo: 1 sequence from an unspecified genome exampleNestedInversions #> GBreaks object with 5 ranges and 1 metadata column: #>       seqnames    ranges strand |        query #>          <Rle> <IRanges>  <Rle> |    <GRanges> #>   [1]     chrA   100-190      + | chrA:100-190 #>   [2]     chrA   200-290      - | chrA:400-490 #>   [3]     chrA   300-390      + | chrA:300-390 #>   [4]     chrA   400-490      - | chrA:200-290 #>   [5]     chrA   500-590      + | chrA:500-590 #>   ------- #>   seqinfo: 1 sequence from an unspecified genome exampleDoubleInversion1 #> GBreaks object with 5 ranges and 1 metadata column: #>       seqnames    ranges strand |        query #>          <Rle> <IRanges>  <Rle> |    <GRanges> #>   [1]     chrA   100-190      + | chrB:100-190 #>   [2]     chrA   200-290      + | chrB:400-490 #>   [3]     chrA   300-390      - | chrB:200-290 #>   [4]     chrA   400-490      - | chrB:300-390 #>   [5]     chrA   500-590      + | chrB:500-590 #>   ------- #>   seqinfo: 1 sequence from an unspecified genome exampleTranslocation #> GBreaks object with 3 ranges and 1 metadata column: #>       seqnames    ranges strand |        query #>          <Rle> <IRanges>  <Rle> |    <GRanges> #>   [1]     chrA   100-200      + | chrB:100-200 #>   [2]     chrA   201-300      + | chrC:201-300 #>   [3]     chrA   301-400      + | chrB:301-400 #>   ------- #>   seqinfo: 1 sequence from an unspecified genome exampleTranslocation2 #> GBreaks object with 3 ranges and 1 metadata column: #>       seqnames    ranges strand |        query #>          <Rle> <IRanges>  <Rle> |    <GRanges> #>   [1]     chrA   100-200      + | chrB:100-200 #>   [2]     chrA   201-300      - | chrC:201-300 #>   [3]     chrA   301-400      + | chrB:301-400 #>   ------- #>   seqinfo: 1 sequence from an unspecified genome"},{"path":"https://oist.github.io/GenomicBreaks/reference/align_scaf_plot_2.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare Alignments over two Reference scaffolds — align_scaf_plot_2","title":"Compare Alignments over two Reference scaffolds — align_scaf_plot_2","text":"function plots pairwise alignments two reference scaffolds. can used aid super-scaffolding. X-axis position reference scaffolds, y-axis aligned query scaffold.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/align_scaf_plot_2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare Alignments over two Reference scaffolds — align_scaf_plot_2","text":"","code":"align_scaf_plot_2(gr_ob, scaf)"},{"path":"https://oist.github.io/GenomicBreaks/reference/align_scaf_plot_2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare Alignments over two Reference scaffolds — align_scaf_plot_2","text":"gr_ob GRanges object containing pairwise alignment scaf list containing two character objetcs names reference scaffolds wish compare plot","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/align_scaf_plot_2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare Alignments over two Reference scaffolds — align_scaf_plot_2","text":"scaffold alignment plot, comparing two reference scaffolds","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/as.html","id":null,"dir":"Reference","previous_headings":"","what":"Conversion from CNEr::Axt objects — as","title":"Conversion from CNEr::Axt objects — as","text":"Conversion CNEr::Axt objects","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/as.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Conversion from CNEr::Axt objects — as","text":"default, Axt objects produced CNEr::readAxt function, coordinates query genome represented numerical value original file.  Axt files, alignment minus strand, query genome coordinates origin reverse-complement strand.  Therefore, although CNEr object stored GRanges object, represent genomic ranges. order , CNEr::fixCoordinates function.","code":""},{"path":[]},{"path":"https://oist.github.io/GenomicBreaks/reference/bp_coverage.html","id":null,"dir":"Reference","previous_headings":"","what":"Coverage over Breakpoints — bp_coverage","title":"Coverage over Breakpoints — bp_coverage","text":"function returns GRanges object containing breakpoints, metadata colummns associated point averaged coverage breakpoint. averaged coverage conducted window, size determined user. coverage regards reference genome. Make query genome subject GRanges object extract information query genome.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/bp_coverage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coverage over Breakpoints — bp_coverage","text":"","code":"bp_coverage(gr_ob, cov_gr, win)"},{"path":"https://oist.github.io/GenomicBreaks/reference/bp_coverage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coverage over Breakpoints — bp_coverage","text":"gr_ob GRanges object containing pairwise alignment (alignments desired genome) cov_gr GRanges object point coverage reference (desired) genome. Point coverage information metadata column \"name\" win even number indicating range overage average coverage calculated.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/bp_coverage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coverage over Breakpoints — bp_coverage","text":"GRanges object breakpoints associated point averaged coverage information","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/bp_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Breakpoint Associated Heatmaps — bp_heatmap","title":"Breakpoint Associated Heatmaps — bp_heatmap","text":"function generates heatmap specified pattern, breakpoints aligned centre plot. result can piped heatmaps::smoothHeatmap heatmaps::plotHeatmapList heatmaps::plotHeatmapMeta","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/bp_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Breakpoint Associated Heatmaps — bp_heatmap","text":"","code":"bp_heatmap(gr, window, pattern, ...)"},{"path":"https://oist.github.io/GenomicBreaks/reference/bp_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Breakpoint Associated Heatmaps — bp_heatmap","text":"gr GRanges object containing pairwise alignment window Range heatmap characteristic plotted. Breakpoints aligned center . pattern Character string desired pattern/characteristic plotted heatmap. ... Pass arguments get_bps.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/bp_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Breakpoint Associated Heatmaps — bp_heatmap","text":"Returns Heatmap object pattern around centred breakpoints.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/bp_heatmap.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Breakpoint Associated Heatmaps — bp_heatmap","text":"GRanges object expected sequence information (see seqinfo) allows retrieval corresponding BSgenome object via BSgenome::getBSgenome function.","code":""},{"path":[]},{"path":"https://oist.github.io/GenomicBreaks/reference/bp_heatmap.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Breakpoint Associated Heatmaps — bp_heatmap","text":"Charlotte West Charles Plessy","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/bp_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Breakpoint Associated Heatmaps — bp_heatmap","text":"","code":"# The plot makes no sense, but that is the best example I have at the moment. exdata_Sac <- system.file(\"extdata/SacCer3__SacPar.gff3.gz\", package = \"GenomicBreaks\") gb <- load_genomic_breaks(exdata_Sac, BSgenome.Scerevisiae.UCSC.sacCer3::Scerevisiae) bp_heatmap(gb, 200, 'GC', dir = \"left\") |>   heatmaps::smoothHeatmap() |> heatmaps::plotHeatmapList() #>  #> Attaching package: ‘Biostrings’ #> The following object is masked from ‘package:base’: #>  #>     strsplit #>  #> Attaching package: ‘rtracklayer’ #> The following object is masked from ‘package:BiocIO’: #>  #>     FileForFormat #>  #> Calculating kernel density... #> plotting heatmap GC"},{"path":"https://oist.github.io/GenomicBreaks/reference/bp_pair_analysis.html","id":null,"dir":"Reference","previous_headings":"","what":"Breakpoint Pairwise Comparison using Reference Genome as Coordinate System — bp_pair_analysis","title":"Breakpoint Pairwise Comparison using Reference Genome as Coordinate System — bp_pair_analysis","text":"function takes two GBreaks objects, target genome. heatmap produced, breakpoints query 1 centre point reference, breakpoints query 2 fall within window projected onto .","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/bp_pair_analysis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Breakpoint Pairwise Comparison using Reference Genome as Coordinate System — bp_pair_analysis","text":"","code":"bp_pair_analysis(gb1, gb2, window, label)"},{"path":"https://oist.github.io/GenomicBreaks/reference/bp_pair_analysis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Breakpoint Pairwise Comparison using Reference Genome as Coordinate System — bp_pair_analysis","text":"gb1 GBreaks object alignment target genome query genome 1. gb2 GBreaks object alignment target genome query genome 2. window range around query1 breakpoints query2 breakpoints projected . even number label string label graph","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/bp_pair_analysis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Breakpoint Pairwise Comparison using Reference Genome as Coordinate System — bp_pair_analysis","text":"Returns Heatmap object pattern can piped heatmaps::smoothHeatmap heatmaps::plotHeatmapList heatmaps::plotHeatmapMeta.","code":""},{"path":[]},{"path":"https://oist.github.io/GenomicBreaks/reference/bp_pair_analysis.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Breakpoint Pairwise Comparison using Reference Genome as Coordinate System — bp_pair_analysis","text":"Charlotte West","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/bridgeRegions.html","id":null,"dir":"Reference","previous_headings":"","what":"Bridge regions — bridgeRegions","title":"Bridge regions — bridgeRegions","text":"Maps unaligned regions target query genome flanked colinear regions.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/bridgeRegions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bridge regions — bridgeRegions","text":"","code":"bridgeRegions(gb)"},{"path":"https://oist.github.io/GenomicBreaks/reference/bridgeRegions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bridge regions — bridgeRegions","text":"gb GBreaks object.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/bridgeRegions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bridge regions — bridgeRegions","text":"Returns new GBreaks object shorter length.  length zero bridge regions found.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/bridgeRegions.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Bridge regions — bridgeRegions","text":"aligned regions can directly adjacent (gaps), returned GBreaks object may contain ranges width zero, start coordinate 1 nucleotide higher end coordinate.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/bridgeRegions.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Bridge regions — bridgeRegions","text":"Bridge regions also called “simultaneous gaps” comparison mouse human genomes Kent WJ, Baertsch R, Hinrichs , Miller W, Haussler D. (Evolution's cauldron: duplication, deletion, rearrangement mouse human genomes. Proc Natl Acad Sci U S . 2003;100(20):11484-11489. doi:10.1073/pnas.1932072100)","code":""},{"path":[]},{"path":"https://oist.github.io/GenomicBreaks/reference/bridgeRegions.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Bridge regions — bridgeRegions","text":"Charles Plessy","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/bridgeRegions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bridge regions — bridgeRegions","text":"","code":"exampleColinear5 #> GBreaks object with 5 ranges and 1 metadata column: #>       seqnames    ranges strand |        query #>          <Rle> <IRanges>  <Rle> |    <GRanges> #>   [1]     chrA   100-190      + | chrB:100-190 #>   [2]     chrA   200-290      + | chrB:200-290 #>   [3]     chrA   300-390      + | chrB:300-390 #>   [4]     chrA   400-490      + | chrB:400-490 #>   [5]     chrA   500-590      + | chrB:500-590 #>   ------- #>   seqinfo: 1 sequence from an unspecified genome bridgeRegions(exampleColinear5) #> GBreaks object with 4 ranges and 1 metadata column: #>       seqnames    ranges strand |        query #>          <Rle> <IRanges>  <Rle> |    <GRanges> #>   [1]     chrA   191-199      * | chrB:191-199 #>   [2]     chrA   291-299      * | chrB:291-299 #>   [3]     chrA   391-399      * | chrB:391-399 #>   [4]     chrA   491-499      * | chrB:491-499 #>   ------- #>   seqinfo: 1 sequence from an unspecified genome  # Note the zero-width ranges when aligned regions are directly adjacent. exampleColinear3 #> GBreaks object with 3 ranges and 1 metadata column: #>       seqnames    ranges strand |        query #>          <Rle> <IRanges>  <Rle> |    <GRanges> #>   [1]     chrA   100-200      + | chrB:100-200 #>   [2]     chrA   201-300      + | chrB:201-300 #>   [3]     chrA   301-400      + | chrB:301-400 #>   ------- #>   seqinfo: 1 sequence from an unspecified genome bridgeRegions(exampleColinear3) #> GBreaks object with 2 ranges and 1 metadata column: #>       seqnames    ranges strand |        query #>          <Rle> <IRanges>  <Rle> |    <GRanges> #>   [1]     chrA   201-200      * | chrB:201-200 #>   [2]     chrA   301-300      * | chrB:301-300 #>   ------- #>   seqinfo: 1 sequence from an unspecified genome"},{"path":"https://oist.github.io/GenomicBreaks/reference/chain_contigs.html","id":null,"dir":"Reference","previous_headings":"","what":"Chain contigs in pairwise alignments — chain_contigs","title":"Chain contigs in pairwise alignments — chain_contigs","text":"Description TBW","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/chain_contigs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Chain contigs in pairwise alignments — chain_contigs","text":"","code":"chain_contigs(gb, tol = Inf, drop.within = FALSE)"},{"path":"https://oist.github.io/GenomicBreaks/reference/chain_contigs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Chain contigs in pairwise alignments — chain_contigs","text":"gb GBreaks object pairwise alignment. tol Unaligned region width lesser equal tol reference query case bridged coalescing. drop.within Discard chains included chains.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/chain_contigs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Chain contigs in pairwise alignments — chain_contigs","text":"TBW","code":""},{"path":[]},{"path":"https://oist.github.io/GenomicBreaks/reference/chain_contigs.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Chain contigs in pairwise alignments — chain_contigs","text":"Charles Plessy","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/chain_contigs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Chain contigs in pairwise alignments — chain_contigs","text":"","code":"chain_contigs(exampleInversion) #> GBreaks object with 2 ranges and 2 metadata columns: #>       seqnames    ranges strand |        query     score #>          <Rle> <IRanges>  <Rle> |    <GRanges> <integer> #>   [1]     chrA   100-400      + | chrB:100-400       301 #>   [2]     chrA   210-291      - | chrB:210-291        82 #>   ------- #>   seqinfo: 1 sequence from an unspecified genome"},{"path":"https://oist.github.io/GenomicBreaks/reference/cleanGaps.html","id":null,"dir":"Reference","previous_headings":"","what":"Gaps between ranges — cleanGaps","title":"Gaps between ranges — cleanGaps","text":"Utility function runs GenomicRanges::gaps() cleans output removing strandless ranges well last range represents sequence end input object end sequence levels.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/cleanGaps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gaps between ranges — cleanGaps","text":"","code":"cleanGaps(gr)"},{"path":"https://oist.github.io/GenomicBreaks/reference/cleanGaps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gaps between ranges — cleanGaps","text":"gr GBreaks GRanges object.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/cleanGaps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gaps between ranges — cleanGaps","text":"Returns strandless GRanges object representing gaps ranges input.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/cleanGaps.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Gaps between ranges — cleanGaps","text":"find replacement provided package already import, please let know GitHub issue pull request.","code":""},{"path":[]},{"path":"https://oist.github.io/GenomicBreaks/reference/cleanGaps.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Gaps between ranges — cleanGaps","text":"Charles Plessy","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/cleanGaps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gaps between ranges — cleanGaps","text":"","code":"cleanGaps(exampleColinear) #> GRanges object with 1 range and 0 metadata columns: #>       seqnames    ranges strand #>          <Rle> <IRanges>  <Rle> #>   [1]     chrA   151-250      * #>   ------- #>   seqinfo: 1 sequence from an unspecified genome GenomicRanges::gaps(exampleColinear) #> GRanges object with 5 ranges and 0 metadata columns: #>       seqnames    ranges strand #>          <Rle> <IRanges>  <Rle> #>   [1]     chrA      1-99      + #>   [2]     chrA   151-250      + #>   [3]     chrA   301-600      + #>   [4]     chrA     1-600      - #>   [5]     chrA     1-600      * #>   ------- #>   seqinfo: 1 sequence from an unspecified genome cleanGaps(exampleInversion) #> GRanges object with 2 ranges and 0 metadata columns: #>       seqnames    ranges strand #>          <Rle> <IRanges>  <Rle> #>   [1]     chrA   191-209      * #>   [2]     chrA   292-300      * #>   ------- #>   seqinfo: 1 sequence from an unspecified genome"},{"path":"https://oist.github.io/GenomicBreaks/reference/coalesce_contigs.html","id":null,"dir":"Reference","previous_headings":"","what":"Coalesce Pairwise Alignments — coalesce_contigs","title":"Coalesce Pairwise Alignments — coalesce_contigs","text":"Coalesce Pairwise Alignments","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/coalesce_contigs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coalesce Pairwise Alignments — coalesce_contigs","text":"","code":"coalesce_contigs(gb, tol = Inf, minwidth = 0)"},{"path":"https://oist.github.io/GenomicBreaks/reference/coalesce_contigs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coalesce Pairwise Alignments — coalesce_contigs","text":"gb GBreaks object pairwise alignment. tol Unaligned region width lesser equal tol reference query case bridged coalescing. minwidth Remove intervals whose width smaller value.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/coalesce_contigs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coalesce Pairwise Alignments — coalesce_contigs","text":"Returns new GBreaks object reduced number alignments fragments due coalescion.  returned object sorted ignoring strand. convenience analysis sessions, score set width ranges target genome.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/coalesce_contigs.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Coalesce Pairwise Alignments — coalesce_contigs","text":"Fragmented alignments arising incorrect basecalls, misassembly misalignments can cause us infer artificial breakpoints Internally, coalesce_contigs uses flagColinearAlignments()  See examples details.","code":""},{"path":[]},{"path":"https://oist.github.io/GenomicBreaks/reference/coalesce_contigs.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Coalesce Pairwise Alignments — coalesce_contigs","text":"Charlotte West Charles Plessy","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/coalesce_contigs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coalesce Pairwise Alignments — coalesce_contigs","text":"","code":"flagColinearAlignments(exampleColinear3, details = TRUE) #> GBreaks object with 3 ranges and 10 metadata columns: #>       seqnames    ranges strand |        query     tfoll     qfoll     tprev #>          <Rle> <IRanges>  <Rle> |    <GRanges> <integer> <integer> <integer> #>   [1]     chrA   100-200      + | chrB:100-200         1         1      <NA> #>   [2]     chrA   201-300      + | chrB:201-300         1         1        -1 #>   [3]     chrA   301-400      + | chrB:301-400      <NA>      <NA>        -1 #>           qprev     t_col     q_col     tdist     qdist  colinear #>       <integer> <logical> <logical> <numeric> <numeric> <logical> #>   [1]      <NA>      TRUE      TRUE         1         1      TRUE #>   [2]        -1      TRUE      TRUE         1         1      TRUE #>   [3]        -1      <NA>      <NA>       Inf       Inf     FALSE #>   ------- #>   seqinfo: 1 sequence from an unspecified genome coalesce_contigs(exampleColinear3) #> GBreaks object with 1 range and 2 metadata columns: #>       seqnames    ranges strand |        query     score #>          <Rle> <IRanges>  <Rle> |    <GRanges> <integer> #>   [1]     chrA   100-400      + | chrB:100-400       301 #>   ------- #>   seqinfo: 1 sequence from an unspecified genome  # Target range [1] precedes target range [2] precede(exampleColinear3) #> [1]  2  3 NA # Query range [1] precedes query range [2] precede(exampleColinear3$query) #> [1]  2  3 NA  # Ranges on the minus strand gb2 <- exampleColinear3 |> reverse() |> sort(ignore.strand = TRUE) flagColinearAlignments(gb2, details = TRUE) #> GBreaks object with 3 ranges and 10 metadata columns: #>       seqnames    ranges strand |        query     tfoll     qfoll     tprev #>          <Rle> <IRanges>  <Rle> |    <GRanges> <integer> <integer> <integer> #>   [1]     chrA   201-300      - | chrB:301-400      <NA>      <NA>         1 #>   [2]     chrA   301-400      - | chrB:201-300        -1        -1         1 #>   [3]     chrA   401-501      - | chrB:100-200        -1        -1      <NA> #>           qprev     t_col     q_col     tdist     qdist  colinear #>       <integer> <logical> <logical> <numeric> <numeric> <logical> #>   [1]         1      TRUE      TRUE         1         1      TRUE #>   [2]         1      TRUE      TRUE         1         1      TRUE #>   [3]      <NA>      <NA>      <NA>       Inf       Inf     FALSE #>   ------- #>   seqinfo: 1 sequence from an unspecified genome coalesce_contigs(gb2) #> GBreaks object with 1 range and 2 metadata columns: #>       seqnames    ranges strand |        query     score #>          <Rle> <IRanges>  <Rle> |    <GRanges> <integer> #>   [1]     chrA   201-501      - | chrB:100-400       301 #>   ------- #>   seqinfo: 1 sequence from an unspecified genome  # Target range [1] follows target range [2] follow(gb2) #> [1]  2  3 NA # Or, ignoring strand, target range [1] precedes target range [2] precede(gb2, ignore.strand = TRUE) #> [1]  2  3 NA # Query range [1] follows query range [2] follow(gb2$query) #> [1]  2  3 NA  # Coalescing strandless objects gb3 <- exampleColinear3 gb4 <- gb2 strand(gb4) <- strand(gb3) <- \"*\" coalesce_contigs(gb3) #> GBreaks object with 1 range and 2 metadata columns: #>       seqnames    ranges strand |        query     score #>          <Rle> <IRanges>  <Rle> |    <GRanges> <integer> #>   [1]     chrA   100-400      * | chrB:100-400       301 #>   ------- #>   seqinfo: 1 sequence from an unspecified genome coalesce_contigs(gb4) #> GBreaks object with 1 range and 2 metadata columns: #>       seqnames    ranges strand |        query     score #>          <Rle> <IRanges>  <Rle> |    <GRanges> <integer> #>   [1]     chrA   201-501      * | chrB:100-400       301 #>   ------- #>   seqinfo: 1 sequence from an unspecified genome"},{"path":"https://oist.github.io/GenomicBreaks/reference/correlation_index.html","id":null,"dir":"Reference","previous_headings":"","what":"Index representing how correlated syntenic regions are — correlation_index","title":"Index representing how correlated syntenic regions are — correlation_index","text":"sequence feature target genome considered ‘syntenic’ feature query genome matched alignments. correlation coefficient center syntenic alignments calculated.  , computed numbers target's features averaged mean weighted total number aligned bases feature.  Thus, number close 1 expected closely related genomes.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/correlation_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Index representing how correlated syntenic regions are — correlation_index","text":"","code":"correlation_index(gb)"},{"path":"https://oist.github.io/GenomicBreaks/reference/correlation_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Index representing how correlated syntenic regions are — correlation_index","text":"gb GBreaks object.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/correlation_index.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Index representing how correlated syntenic regions are — correlation_index","text":"Returns numeric value 0 1.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/correlation_index.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Index representing how correlated syntenic regions are — correlation_index","text":", definition ‘synteny’ sequences DNA strands, technical terms: sequences feature, regardless strand orientation.","code":""},{"path":[]},{"path":"https://oist.github.io/GenomicBreaks/reference/correlation_index.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Index representing how correlated syntenic regions are — correlation_index","text":"","code":"gb       <- GRanges(c(\"Ref:100-200:+\",   \"Ref:400-500:+\",    \"Ref:600-700:+\")) gb$query <- GRanges(c(\"Que:1100-1200:+\", \"Que2:1700-1800:+\", \"Que:1500-1600:+\")) correlation_index(gb) #> [1] 1"},{"path":"https://oist.github.io/GenomicBreaks/reference/dist2next.html","id":null,"dir":"Reference","previous_headings":"","what":"Distances to next ranges — dist2next","title":"Distances to next ranges — dist2next","text":"Calculates distance next range target query genome.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/dist2next.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distances to next ranges — dist2next","text":"","code":"dist2next(x, step = 1, ignore.strand = FALSE)  # S4 method for GRanges dist2next(x, step = 1, ignore.strand = FALSE)  # S4 method for GBreaks dist2next(x, step = 1, ignore.strand = FALSE)"},{"path":"https://oist.github.io/GenomicBreaks/reference/dist2next.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Distances to next ranges — dist2next","text":"x GRanges GBreaks object. step Distance nth block (default: first). ignore.strand Calculate distance ranges different strands.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/dist2next.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Distances to next ranges — dist2next","text":"GRanges, returns object one extra metadata colums, dist, GBreaks two extra columns tdist qdist, containing distance next range reference query genomes respectively.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/dist2next.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Distances to next ranges — dist2next","text":"distance defined GenomicRanges::distance function.  Note last range next neighbor, last value set Inf arbitrarily.","code":""},{"path":[]},{"path":"https://oist.github.io/GenomicBreaks/reference/dist2next.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Distances to next ranges — dist2next","text":"","code":"dist2next(exampleInversion) #> GBreaks object with 3 ranges and 3 metadata columns: #>       seqnames    ranges strand |        query     tdist     qdist #>          <Rle> <IRanges>  <Rle> |    <GRanges> <numeric> <numeric> #>   [1]     chrA   100-190      + | chrB:100-190        NA        20 #>   [2]     chrA   210-291      - | chrB:210-291        NA        10 #>   [3]     chrA   301-400      + | chrB:301-400       Inf       Inf #>   ------- #>   seqinfo: 1 sequence from an unspecified genome dist2next(granges(exampleInversion)) #> GRanges object with 3 ranges and 1 metadata column: #>       seqnames    ranges strand |      dist #>          <Rle> <IRanges>  <Rle> | <numeric> #>   [1]     chrA   100-190      + |        NA #>   [2]     chrA   210-291      - |        NA #>   [3]     chrA   301-400      + |       Inf #>   ------- #>   seqinfo: 1 sequence from an unspecified genome dist2next(exampleInversion, ignore.strand = TRUE) #> GBreaks object with 3 ranges and 3 metadata columns: #>       seqnames    ranges strand |        query     tdist     qdist #>          <Rle> <IRanges>  <Rle> |    <GRanges> <numeric> <numeric> #>   [1]     chrA   100-190      + | chrB:100-190        20        20 #>   [2]     chrA   210-291      - | chrB:210-291        10        10 #>   [3]     chrA   301-400      + | chrB:301-400       Inf       Inf #>   ------- #>   seqinfo: 1 sequence from an unspecified genome dist2next(exampleInversion - 20, ignore.strand = TRUE) #> GBreaks object with 3 ranges and 3 metadata columns: #>       seqnames    ranges strand |        query     tdist     qdist #>          <Rle> <IRanges>  <Rle> |    <GRanges> <numeric> <numeric> #>   [1]     chrA   120-170      + | chrB:100-190        60        20 #>   [2]     chrA   230-271      - | chrB:210-291        50        10 #>   [3]     chrA   321-380      + | chrB:301-400       Inf       Inf #>   ------- #>   seqinfo: 1 sequence from an unspecified genome dist2next(exampleInversion, 2) #> GBreaks object with 3 ranges and 3 metadata columns: #>       seqnames    ranges strand |        query     tdist     qdist #>          <Rle> <IRanges>  <Rle> |    <GRanges> <numeric> <numeric> #>   [1]     chrA   100-190      + | chrB:100-190       111       111 #>   [2]     chrA   210-291      - | chrB:210-291       Inf       Inf #>   [3]     chrA   301-400      + | chrB:301-400       Inf       Inf #>   ------- #>   seqinfo: 1 sequence from an unspecified genome"},{"path":"https://oist.github.io/GenomicBreaks/reference/feature_coverage.html","id":null,"dir":"Reference","previous_headings":"","what":"Feature coverage heatmap — feature_coverage","title":"Feature coverage heatmap — feature_coverage","text":"Wraps heatmaps::CoverageHeatmap function produce heatmap centred boundaries genomic ranges.  Assuming ranges GBreaks object, boundaries approximate breakpoints.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/feature_coverage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Feature coverage heatmap — feature_coverage","text":"","code":"feature_coverage(gr, feat, window, label, ...)"},{"path":"https://oist.github.io/GenomicBreaks/reference/feature_coverage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Feature coverage heatmap — feature_coverage","text":"gr GRanges object. feat GRanges object representing feature interest. window Window observe feature coverage. label Label plot. ... arguments passed get_bps order select boundaries, order orientation.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/feature_coverage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Feature coverage heatmap — feature_coverage","text":"Returns Heatmap object can piped heatmaps::smoothHeatmap heatmaps::plotHeatmapList heatmaps::plotHeatmapMeta.","code":""},{"path":[]},{"path":"https://oist.github.io/GenomicBreaks/reference/filterColinearRegions.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter colinear regions — filterColinearRegions","title":"Filter colinear regions — filterColinearRegions","text":"Filter colinear regions","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/filterColinearRegions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter colinear regions — filterColinearRegions","text":"","code":"filterColinearRegions(gb, rename = TRUE)"},{"path":"https://oist.github.io/GenomicBreaks/reference/filterColinearRegions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter colinear regions — filterColinearRegions","text":"gb GBreaks object processed flagColinearAlignments. rename Replace range names numeric order subsetting.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/filterColinearRegions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter colinear regions — filterColinearRegions","text":"Returns GBreaks object ranges central part inversion triplet discarded.  object missing colinear metadata column, return object discarding ranges.","code":""},{"path":[]},{"path":"https://oist.github.io/GenomicBreaks/reference/filterColinearRegions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter colinear regions — filterColinearRegions","text":"","code":"filterColinearRegions(flagColinearAlignments(exampleColinear)) #> GBreaks object with 2 ranges and 2 metadata columns: #>     seqnames    ranges strand |        query  colinear #>        <Rle> <IRanges>  <Rle> |    <GRanges> <logical> #>   1     chrA   100-150      + | chrB:100-150      TRUE #>   2     chrA   251-300      + | chrB:251-300     FALSE #>   ------- #>   seqinfo: 1 sequence from an unspecified genome"},{"path":"https://oist.github.io/GenomicBreaks/reference/filterDoubleInversions.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract central blocks in double inversions — filterDoubleInversions","title":"Extract central blocks in double inversions — filterDoubleInversions","text":"Extract central blocks double inversions","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/filterDoubleInversions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract central blocks in double inversions — filterDoubleInversions","text":"","code":"filterDoubleInversions(gb, rename = TRUE)"},{"path":"https://oist.github.io/GenomicBreaks/reference/filterDoubleInversions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract central blocks in double inversions — filterDoubleInversions","text":"gb GBreaks object processed flagDoubleInversions. rename Replace range names numeric order subsetting.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/filterDoubleInversions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract central blocks in double inversions — filterDoubleInversions","text":"Returns GBreaks object ranges central part double inversion quintuplet discarded.  object missing Dbl metadata column, return object discarding ranges.","code":""},{"path":[]},{"path":"https://oist.github.io/GenomicBreaks/reference/filterDoubleInversions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract central blocks in double inversions — filterDoubleInversions","text":"","code":"filterDoubleInversions(flagDoubleInversions(exampleDoubleInversion1)) #> GBreaks object with 3 ranges and 2 metadata columns: #>     seqnames    ranges strand |        query       Dbl #>        <Rle> <IRanges>  <Rle> |    <GRanges> <logical> #>   3     chrA   300-390      - | chrB:200-290     FALSE #>   4     chrA   400-490      - | chrB:300-390     FALSE #>   5     chrA   500-590      + | chrB:500-590     FALSE #>   ------- #>   seqinfo: 1 sequence from an unspecified genome"},{"path":"https://oist.github.io/GenomicBreaks/reference/filterInversions.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract central blocks in inversions — filterInversions","title":"Extract central blocks in inversions — filterInversions","text":"Extract central blocks inversions","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/filterInversions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract central blocks in inversions — filterInversions","text":"","code":"filterInversions(gb, rename = TRUE)"},{"path":"https://oist.github.io/GenomicBreaks/reference/filterInversions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract central blocks in inversions — filterInversions","text":"gb GBreaks object processed flagInversions. rename Replace range names numeric order subsetting.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/filterInversions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract central blocks in inversions — filterInversions","text":"Returns GBreaks object ranges central part inversion triplet discarded.  object missing inv metadata column, return object discarding ranges.","code":""},{"path":[]},{"path":"https://oist.github.io/GenomicBreaks/reference/filterInversions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract central blocks in inversions — filterInversions","text":"","code":"filterInversions(flagInversions(exampleInversion)) #> GBreaks object with 1 range and 2 metadata columns: #>     seqnames    ranges strand |        query   inv #>        <Rle> <IRanges>  <Rle> |    <GRanges> <Rle> #>   2     chrA   210-291      - | chrB:210-291 FALSE #>   ------- #>   seqinfo: 1 sequence from an unspecified genome"},{"path":"https://oist.github.io/GenomicBreaks/reference/filterTranslocations.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract central blocks in translocations — filterTranslocations","title":"Extract central blocks in translocations — filterTranslocations","text":"Extract central blocks translocations","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/filterTranslocations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract central blocks in translocations — filterTranslocations","text":"","code":"filterTranslocations(gb, rename = TRUE, remove = FALSE)"},{"path":"https://oist.github.io/GenomicBreaks/reference/filterTranslocations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract central blocks in translocations — filterTranslocations","text":"gb GBreaks object processed flagTranslocations. rename Replace range names numeric order subsetting. remove Filter instead filtering .","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/filterTranslocations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract central blocks in translocations — filterTranslocations","text":"Returns GBreaks object ranges central part inversion triplet discarded.  object missing tra metadata column, return object discarding ranges.","code":""},{"path":[]},{"path":"https://oist.github.io/GenomicBreaks/reference/filterTranslocations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract central blocks in translocations — filterTranslocations","text":"","code":"filterTranslocations(flagTranslocations(exampleTranslocation)) #> GBreaks object with 1 range and 2 metadata columns: #>     seqnames    ranges strand |        query   tra #>        <Rle> <IRanges>  <Rle> |    <GRanges> <Rle> #>   2     chrA   201-300      + | chrC:201-300 FALSE #>   ------- #>   seqinfo: 1 sequence from an unspecified genome filterTranslocations(remove = TRUE, flagTranslocations(exampleTranslocation)) #> GBreaks object with 2 ranges and 2 metadata columns: #>     seqnames    ranges strand |        query   tra #>        <Rle> <IRanges>  <Rle> |    <GRanges> <Rle> #>   1     chrA   100-200      + | chrB:100-200  TRUE #>   3     chrA   301-400      + | chrB:301-400 FALSE #>   ------- #>   seqinfo: 1 sequence from an unspecified genome"},{"path":"https://oist.github.io/GenomicBreaks/reference/flagAll.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute all flags — flagAll","title":"Compute all flags — flagAll","text":"Flag ranges beginning colinear duplet, inversion translocation triplet.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/flagAll.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute all flags — flagAll","text":"","code":"flagAll(gb)"},{"path":"https://oist.github.io/GenomicBreaks/reference/flagAll.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute all flags — flagAll","text":"gb GBreaks object.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/flagAll.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute all flags — flagAll","text":"Returns GBreaks object extra flag metadata column.","code":""},{"path":[]},{"path":"https://oist.github.io/GenomicBreaks/reference/flagAll.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute all flags — flagAll","text":"","code":"flagAll(exampleInversion) #> GBreaks object with 3 ranges and 2 metadata columns: #>       seqnames    ranges strand |        query        flag #>          <Rle> <IRanges>  <Rle> |    <GRanges> <character> #>   [1]     chrA   100-190      + | chrB:100-190         Inv #>   [2]     chrA   210-291      - | chrB:210-291        <NA> #>   [3]     chrA   301-400      + | chrB:301-400        <NA> #>   ------- #>   seqinfo: 1 sequence from an unspecified genome"},{"path":"https://oist.github.io/GenomicBreaks/reference/flagColinearAlignments.html","id":null,"dir":"Reference","previous_headings":"","what":"Flag colinear alignments — flagColinearAlignments","title":"Flag colinear alignments — flagColinearAlignments","text":"Flags alignments colinear next one sequence order. flag added first alignment.  Colinearity defined fact next alignment target genome next alignment query genome, strand information taken account.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/flagColinearAlignments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flag colinear alignments — flagColinearAlignments","text":"","code":"flagColinearAlignments(gb, tol = Inf, minwidth = 0, details = FALSE)"},{"path":"https://oist.github.io/GenomicBreaks/reference/flagColinearAlignments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flag colinear alignments — flagColinearAlignments","text":"gb GBreaks object pairwise alignment. tol Unaligned regions larger tolerance threshold interrupt colinearity. minwidth Remove intervals whose width smaller value. details Returns metadata columns TRUE.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/flagColinearAlignments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flag colinear alignments — flagColinearAlignments","text":"Returns modified GBreaks object new colinear metadata column indicating alignment colinear next one.  details option set TRUE, also output relative position following previous alignments target query genomes (tfoll, tprev, qfoll, qprev), partial colinearity flag genome (t_col q_col), distance next alignment genome (tdist qdist).","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/flagColinearAlignments.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Flag colinear alignments — flagColinearAlignments","text":"Internally, flagColinearAlignments() uses GenomicRanges::precede GenomicRanges::follow functions functions determine next.  given range, functions return index position range precedes follows, NA first range follows nothing last range precedes nothing.  See examples details.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/flagColinearAlignments.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Flag colinear alignments — flagColinearAlignments","text":"flags valid long Genomic Breaks object modified removing alignments sorting different order. Pay attention mindwidth option passed, intervals discarded returned object.  parameter might removed future confusing useless.","code":""},{"path":[]},{"path":"https://oist.github.io/GenomicBreaks/reference/flagColinearAlignments.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Flag colinear alignments — flagColinearAlignments","text":"Charlotte West Charles Plessy","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/flagColinearAlignments.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flag colinear alignments — flagColinearAlignments","text":"","code":"flagColinearAlignments(exampleColinear3) #> GBreaks object with 3 ranges and 2 metadata columns: #>       seqnames    ranges strand |        query  colinear #>          <Rle> <IRanges>  <Rle> |    <GRanges> <logical> #>   [1]     chrA   100-200      + | chrB:100-200      TRUE #>   [2]     chrA   201-300      + | chrB:201-300      TRUE #>   [3]     chrA   301-400      + | chrB:301-400     FALSE #>   ------- #>   seqinfo: 1 sequence from an unspecified genome flagColinearAlignments(exampleColinear3, details = TRUE) #> GBreaks object with 3 ranges and 10 metadata columns: #>       seqnames    ranges strand |        query     tfoll     qfoll     tprev #>          <Rle> <IRanges>  <Rle> |    <GRanges> <integer> <integer> <integer> #>   [1]     chrA   100-200      + | chrB:100-200         1         1      <NA> #>   [2]     chrA   201-300      + | chrB:201-300         1         1        -1 #>   [3]     chrA   301-400      + | chrB:301-400      <NA>      <NA>        -1 #>           qprev     t_col     q_col     tdist     qdist  colinear #>       <integer> <logical> <logical> <numeric> <numeric> <logical> #>   [1]      <NA>      TRUE      TRUE         1         1      TRUE #>   [2]        -1      TRUE      TRUE         1         1      TRUE #>   [3]        -1      <NA>      <NA>       Inf       Inf     FALSE #>   ------- #>   seqinfo: 1 sequence from an unspecified genome  # Target range [1] precedes target range [2] precede(exampleColinear3) #> [1]  2  3 NA # Query range [1] precedes query range [2] precede(exampleColinear3$query) #> [1]  2  3 NA  # Ranges on the minus strand gb2 <- exampleColinear3 |> reverse() |> sort(ignore.strand = TRUE) flagColinearAlignments(gb2) #> GBreaks object with 3 ranges and 2 metadata columns: #>       seqnames    ranges strand |        query  colinear #>          <Rle> <IRanges>  <Rle> |    <GRanges> <logical> #>   [1]     chrA   201-300      - | chrB:301-400      TRUE #>   [2]     chrA   301-400      - | chrB:201-300      TRUE #>   [3]     chrA   401-501      - | chrB:100-200     FALSE #>   ------- #>   seqinfo: 1 sequence from an unspecified genome  # Target range [1] follows target range [2] follow(gb2) #> [1]  2  3 NA # Or, ignoring strand, target range [1] precedes target range [2] precede(gb2, ignore.strand = TRUE) #> [1]  2  3 NA # Query range [1] follows query range [2] follow(gb2$query) #> [1]  2  3 NA  # Colinearity check on strandless objects gb3 <- exampleColinear3 gb4 <- gb2 strand(gb4) <- strand(gb3) <- \"*\" flagColinearAlignments(gb3) #> GBreaks object with 3 ranges and 2 metadata columns: #>       seqnames    ranges strand |        query  colinear #>          <Rle> <IRanges>  <Rle> |    <GRanges> <logical> #>   [1]     chrA   100-200      * | chrB:100-200      TRUE #>   [2]     chrA   201-300      * | chrB:201-300      TRUE #>   [3]     chrA   301-400      * | chrB:301-400     FALSE #>   ------- #>   seqinfo: 1 sequence from an unspecified genome flagColinearAlignments(gb4) #> GBreaks object with 3 ranges and 2 metadata columns: #>       seqnames    ranges strand |        query  colinear #>          <Rle> <IRanges>  <Rle> |    <GRanges> <logical> #>   [1]     chrA   201-300      * | chrB:301-400      TRUE #>   [2]     chrA   301-400      * | chrB:201-300      TRUE #>   [3]     chrA   401-501      * | chrB:100-200     FALSE #>   ------- #>   seqinfo: 1 sequence from an unspecified genome  # Ranges that should not coalesce because they are not # ordered properly flagColinearAlignments(exampleNotColinear) #> GBreaks object with 2 ranges and 2 metadata columns: #>       seqnames    ranges strand |        query  colinear #>          <Rle> <IRanges>  <Rle> |    <GRanges> <logical> #>   [1]     chrA   100-150      + | chrB:201-251     FALSE #>   [2]     chrA   251-300      + |  chrB:50-100     FALSE #>   ------- #>   seqinfo: 1 sequence from an unspecified genome"},{"path":"https://oist.github.io/GenomicBreaks/reference/flagDoubleInversions.html","id":null,"dir":"Reference","previous_headings":"","what":"Flag double inversions — flagDoubleInversions","title":"Flag double inversions — flagDoubleInversions","text":"Two consecutive overlapping inversions generate patterns can function aims detect.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/flagDoubleInversions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flag double inversions — flagDoubleInversions","text":"","code":"flagDoubleInversions(gb, details = FALSE)"},{"path":"https://oist.github.io/GenomicBreaks/reference/flagDoubleInversions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flag double inversions — flagDoubleInversions","text":"gb GBreaks() object. details Returns metadata columns TRUE.","code":""},{"path":[]},{"path":"https://oist.github.io/GenomicBreaks/reference/flagDoubleInversions.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Flag double inversions — flagDoubleInversions","text":"Charles Plessy","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/flagDoubleInversions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flag double inversions — flagDoubleInversions","text":"","code":"# Start colinear.  Lower case meands minus strand z0 <- GBreaks(target = GRanges(c(A=\"T:10-15:+\", B=\"T:20-25:+\", C=\"T:30-35:+\")),               query  = GRanges(c(A=\"Q:10-15\",   B=\"Q:20-25\",   C=\"Q:30-35\")))  # Swap coordinates of A and B on the query and flip strands  ABC -> baC z1 <- GBreaks(target = GRanges(c(A=\"T:10-15:-\", B=\"T:20-25:-\", C=\"T:30-35:+\")),               query  = GRanges(c(a=\"Q:20-25\",   b=\"Q:10-15\",   C=\"Q:30-35\")))  # Now query order is b - a - C.  Swap a and C and flip strands baC -> bcA z2 <- GBreaks(target = GRanges(c(A=\"T:10-15:+\", B=\"T:20-25:-\", C=\"T:30-35:-\")),               query  = GRanges(c(A=\"Q:30-35\",   b=\"Q:10-15\",   c=\"Q:20-25\")))  # Altogether, there are: # ABC -> baC -> bcA # ABC -> Acb -> Cab # cba -> BCa -> BAc # cba -> cAB -> aCB   # z2 has same topoloty as package example plotApairOfChrs(z2)  plotApairOfChrs(exampleDoubleInversion1)   flagDoubleInversions(exampleDoubleInversion1 ) #> GBreaks object with 5 ranges and 2 metadata columns: #>       seqnames    ranges strand |        query       Dbl #>          <Rle> <IRanges>  <Rle> |    <GRanges> <logical> #>   [1]     chrA   100-190      + | chrB:100-190     FALSE #>   [2]     chrA   200-290      + | chrB:400-490      TRUE #>   [3]     chrA   300-390      - | chrB:200-290     FALSE #>   [4]     chrA   400-490      - | chrB:300-390     FALSE #>   [5]     chrA   500-590      + | chrB:500-590     FALSE #>   ------- #>   seqinfo: 1 sequence from an unspecified genome  exampleDoubleInversion1Rev <- reverse(exampleDoubleInversion1) |> sort(ignore.strand = TRUE) exampleDoubleInversion1Rev[2:4] |> plotApairOfChrs()"},{"path":"https://oist.github.io/GenomicBreaks/reference/flagInversions.html","id":null,"dir":"Reference","previous_headings":"","what":"Flag inversions — flagInversions","title":"Flag inversions — flagInversions","text":"Flag ranges start triplet colinear central pair aligned opposite strand.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/flagInversions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flag inversions — flagInversions","text":"","code":"flagInversions(gb, tol = Inf)"},{"path":"https://oist.github.io/GenomicBreaks/reference/flagInversions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flag inversions — flagInversions","text":"gb GBreaks() object. tol Tolerance window distance two ranges.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/flagInversions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flag inversions — flagInversions","text":"Returns GBreaks object extra inv metadata column.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/flagInversions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Flag inversions — flagInversions","text":"trivial example inversion.","code":"┌──────────────┬──────────────┬──────────────┐ │ chrA:101-200 │ chrA:201-300 │ chrA:301-400 │ (Target genome) └──────────────┴──────────────┴──────────────┘        +               -             +         (Alignment direction) ┌──────────────┬──────────────┬──────────────┐ │ chrB:101-200 │ chrB:201-300 │ chrB:301-400 │ (Query genome) └──────────────┴──────────────┴──────────────┘"},{"path":[]},{"path":"https://oist.github.io/GenomicBreaks/reference/flagInversions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flag inversions — flagInversions","text":"","code":"flagInversions(exampleInversion) #> GBreaks object with 3 ranges and 2 metadata columns: #>       seqnames    ranges strand |        query   inv #>          <Rle> <IRanges>  <Rle> |    <GRanges> <Rle> #>   [1]     chrA   100-190      + | chrB:100-190  TRUE #>   [2]     chrA   210-291      - | chrB:210-291 FALSE #>   [3]     chrA   301-400      + | chrB:301-400 FALSE #>   ------- #>   seqinfo: 1 sequence from an unspecified genome flagInversions(exampleInversion, tol = 19) #> GBreaks object with 3 ranges and 2 metadata columns: #>       seqnames    ranges strand |        query   inv #>          <Rle> <IRanges>  <Rle> |    <GRanges> <Rle> #>   [1]     chrA   100-190      + | chrB:100-190 FALSE #>   [2]     chrA   210-291      - | chrB:210-291 FALSE #>   [3]     chrA   301-400      + | chrB:301-400 FALSE #>   ------- #>   seqinfo: 1 sequence from an unspecified genome plotApairOfChrs(exampleInversion)   flagInversions(exampleInversion |> reverse() |> sort(ignore.strand = TRUE)) #> GBreaks object with 3 ranges and 2 metadata columns: #>       seqnames    ranges strand |        query   inv #>          <Rle> <IRanges>  <Rle> |    <GRanges> <Rle> #>   [1]     chrA   201-300      - | chrB:301-400  TRUE #>   [2]     chrA   310-391      + | chrB:210-291 FALSE #>   [3]     chrA   411-501      - | chrB:100-190 FALSE #>   ------- #>   seqinfo: 1 sequence from an unspecified genome plotApairOfChrs(exampleInversion |> reverse())"},{"path":"https://oist.github.io/GenomicBreaks/reference/flagLongShort.html","id":null,"dir":"Reference","previous_headings":"","what":"Flag long and short arms — flagLongShort","title":"Flag long and short arms — flagLongShort","text":"Oikopleura genomes special long short arms chromosomes different properties GC repeat content.  can useful know genomic region belongs long short arm.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/flagLongShort.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flag long and short arms — flagLongShort","text":"","code":"flagLongShort(gr, annot, select = c(\"first\", \"last\", \"arbitrary\"))"},{"path":"https://oist.github.io/GenomicBreaks/reference/flagLongShort.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flag long and short arms — flagLongShort","text":"gr GBreaks simple GRanges object annot GRanges file containing coordinate arms nature (long, short, XSR YSR) Type metadata column. select One method among first, last arbitrary, decide handle regions match arms.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/flagLongShort.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flag long and short arms — flagLongShort","text":"Returns modified version object extra metadata column, Arm information annotation file's Type column transferred.  See examples manual IRanges::findOverlaps details. regions match arms handled.","code":""},{"path":[]},{"path":"https://oist.github.io/GenomicBreaks/reference/flagLongShort.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Flag long and short arms — flagLongShort","text":"Charles Plessy","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/flagLongShort.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flag long and short arms — flagLongShort","text":"","code":"annot <- GRanges(c(\"chrA:1-140\", \"chrA:150-500\"), Type = c(\"short\", \"long\"))  flagLongShort(exampleColinear, annot) #> GBreaks object with 2 ranges and 2 metadata columns: #>       seqnames    ranges strand |        query      Arm #>          <Rle> <IRanges>  <Rle> |    <GRanges> <factor> #>   [1]     chrA   100-150      + | chrB:100-150    short #>   [2]     chrA   251-300      + | chrB:251-300    long  #>   ------- #>   seqinfo: 1 sequence from an unspecified genome flagLongShort(exampleColinear, annot, select = \"last\") #> GBreaks object with 2 ranges and 2 metadata columns: #>       seqnames    ranges strand |        query      Arm #>          <Rle> <IRanges>  <Rle> |    <GRanges> <factor> #>   [1]     chrA   100-150      + | chrB:100-150     long #>   [2]     chrA   251-300      + | chrB:251-300     long #>   ------- #>   seqinfo: 1 sequence from an unspecified genome flagLongShort(exampleColinear, annot, select = \"arbitrary\") #> GBreaks object with 2 ranges and 2 metadata columns: #>       seqnames    ranges strand |        query      Arm #>          <Rle> <IRanges>  <Rle> |    <GRanges> <factor> #>   [1]     chrA   100-150      + | chrB:100-150    short #>   [2]     chrA   251-300      + | chrB:251-300    long  #>   ------- #>   seqinfo: 1 sequence from an unspecified genome"},{"path":"https://oist.github.io/GenomicBreaks/reference/flagPairs.html","id":null,"dir":"Reference","previous_headings":"","what":"Flag successive entries of a GBreaks object — flagPairs","title":"Flag successive entries of a GBreaks object — flagPairs","text":"Scans sorted GBreaks object issues flag describing relation current entry next entry.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/flagPairs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flag successive entries of a GBreaks object — flagPairs","text":"","code":"flagPairs(gb)"},{"path":"https://oist.github.io/GenomicBreaks/reference/flagPairs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flag successive entries of a GBreaks object — flagPairs","text":"gb GBreaks() object.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/flagPairs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flag successive entries of a GBreaks object — flagPairs","text":"Returns GBreaks object extra pairs metadata column. pairs column factor flags, table(gb$pairs) always returns vector length, reporting 0 necessary. allows easily aggregate results multiple objects.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/flagPairs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Flag successive entries of a GBreaks object — flagPairs","text":"object sorted, next entry target genome definition following current one unless end sequence feature (contig, scaffold, …) reached.  two target ranges can strand opposite strands.  difference made +/- -/+ orientations arbitrary unless sequence features genomes oriented, case comparing chromosomal assemblies related species. Depending whether query ranges precede follow , next , depending strand alignments, flag issued current entry.  Col signals colinearity next entry, Inv inversion either entry, Flp signals order entries one hand jumped one.  query ranges next , Scr flag, scrambled, issued. Lastly, Bnd (boundary) signals pair analyse current entry last one current sequence level target genome.","code":""},{"path":[]},{"path":"https://oist.github.io/GenomicBreaks/reference/flagPairs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flag successive entries of a GBreaks object — flagPairs","text":"","code":"flagPairs(exampleInversion) #> GBreaks object with 3 ranges and 2 metadata columns: #>       seqnames    ranges strand |        query    pairs #>          <Rle> <IRanges>  <Rle> |    <GRanges> <factor> #>   [1]     chrA   100-190      + | chrB:100-190      Inv #>   [2]     chrA   210-291      - | chrB:210-291      Inv #>   [3]     chrA   301-400      + | chrB:301-400      Bnd #>   ------- #>   seqinfo: 1 sequence from an unspecified genome flagPairs(exampleTranslocation) #> GBreaks object with 3 ranges and 2 metadata columns: #>       seqnames    ranges strand |        query    pairs #>          <Rle> <IRanges>  <Rle> |    <GRanges> <factor> #>   [1]     chrA   100-200      + | chrB:100-200      Scr #>   [2]     chrA   201-300      + | chrC:201-300      Scr #>   [3]     chrA   301-400      + | chrB:301-400      Bnd #>   ------- #>   seqinfo: 1 sequence from an unspecified genome  # How the pair classes are defined: GenomicBreaks:::allPossiblePairClasses #>    Qnext Strnd Snext pair     paste #> 1   next     +     +  Col  next + + #> 2   prev     +     +  Flp  prev + + #> 3  other     +     +  Scr other + + #> 4   next     -     +  Inv  next - + #> 5   prev     -     +  Inv  prev - + #> 6  other     -     +  Scr other - + #> 7   next     +     -  Inv  next + - #> 8   prev     +     -  Inv  prev + - #> 9  other     +     -  Scr other + - #> 10  next     -     -  Flp  next - - #> 11  prev     -     -  Col  prev - - #> 12 other     -     -  Scr other - -"},{"path":"https://oist.github.io/GenomicBreaks/reference/flagTranslocations.html","id":null,"dir":"Reference","previous_headings":"","what":"Flag translocations — flagTranslocations","title":"Flag translocations — flagTranslocations","text":"Flag ranges start triplet colinear central pair colinear, inversion.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/flagTranslocations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flag translocations — flagTranslocations","text":"","code":"flagTranslocations(gb, tol = Inf, both = TRUE)"},{"path":"https://oist.github.io/GenomicBreaks/reference/flagTranslocations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flag translocations — flagTranslocations","text":"gb GBreaks() object. tol Tolerance window distance two ranges. Flag target query ranges.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/flagTranslocations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flag translocations — flagTranslocations","text":"Returns GBreaks object extra tra metadata column.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/flagTranslocations.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Flag translocations — flagTranslocations","text":"result flagging differs target query ranges swapped.  Therefore, default function search translocations cases, flag ranges. trivial example translocation:","code":"┌──────────────┬──────────────┬──────────────┐ │ chrA:101-200 │ chrA:201-300 │ chrA:301-400 │ (Target genome) └──────────────┴──────────────┴──────────────┘        +               +             +         (Alignment direction) ┌──────────────┬──────────────┬──────────────┐ │ chrB:101-200 │ chrC:201-300 │ chrB:301-400 │ (Query genome) └──────────────┴──────────────┴──────────────┘"},{"path":[]},{"path":"https://oist.github.io/GenomicBreaks/reference/flagTranslocations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flag translocations — flagTranslocations","text":"","code":"flagTranslocations(exampleTranslocation) #> GBreaks object with 3 ranges and 2 metadata columns: #>       seqnames    ranges strand |        query   tra #>          <Rle> <IRanges>  <Rle> |    <GRanges> <Rle> #>   [1]     chrA   100-200      + | chrB:100-200  TRUE #>   [2]     chrA   201-300      + | chrC:201-300 FALSE #>   [3]     chrA   301-400      + | chrB:301-400 FALSE #>   ------- #>   seqinfo: 1 sequence from an unspecified genome flagTranslocations(exampleTranslocation2) #> GBreaks object with 3 ranges and 2 metadata columns: #>       seqnames    ranges strand |        query   tra #>          <Rle> <IRanges>  <Rle> |    <GRanges> <Rle> #>   [1]     chrA   100-200      + | chrB:100-200  TRUE #>   [2]     chrA   201-300      - | chrC:201-300 FALSE #>   [3]     chrA   301-400      + | chrB:301-400 FALSE #>   ------- #>   seqinfo: 1 sequence from an unspecified genome plotApairOfChrs(exampleTranslocation)  flagTranslocations(exampleDeletion) #> GBreaks object with 3 ranges and 2 metadata columns: #>       seqnames    ranges strand |        query   tra #>          <Rle> <IRanges>  <Rle> |    <GRanges> <Rle> #>   [1]     chrA   100-200      + | chrB:100-200  TRUE #>   [2]     chrA   201-300      + | chrC:401-500 FALSE #>   [3]     chrA   301-400      + | chrB:201-300 FALSE #>   ------- #>   seqinfo: 1 sequence from an unspecified genome flagTranslocations(exampleInsertion) #> GBreaks object with 3 ranges and 2 metadata columns: #>       seqnames    ranges strand |        query   tra #>          <Rle> <IRanges>  <Rle> |    <GRanges> <Rle> #>   [1]     chrA   100-200      + | chrB:100-200 FALSE #>   [2]     chrA   201-300      + | chrB:301-400 FALSE #>   [3]     chrC   401-500      + | chrB:201-300 FALSE #>   ------- #>   seqinfo: 2 sequences from an unspecified genome flagTranslocations(exampleInsertion  |> swap(sort = TRUE)) #> GBreaks object with 3 ranges and 2 metadata columns: #>       seqnames    ranges strand |        query   tra #>          <Rle> <IRanges>  <Rle> |    <GRanges> <Rle> #>   [1]     chrB   100-200      + | chrA:100-200  TRUE #>   [2]     chrB   201-300      + | chrC:401-500 FALSE #>   [3]     chrB   301-400      + | chrA:201-300 FALSE #>   ------- #>   seqinfo: 1 sequence from an unspecified genome flagTranslocations(exampleInsertion) |> swap(sort = TRUE) #> GBreaks object with 3 ranges and 2 metadata columns: #>       seqnames    ranges strand |   tra        query #>          <Rle> <IRanges>  <Rle> | <Rle>    <GRanges> #>   [1]     chrB   100-200      + |  TRUE chrA:100-200 #>   [2]     chrB   201-300      + | FALSE chrC:401-500 #>   [3]     chrB   301-400      + | FALSE chrA:201-300 #>   ------- #>   seqinfo: 1 sequence from an unspecified genome flagTranslocations(sort(reverse(exampleDeletion))) #> GBreaks object with 3 ranges and 2 metadata columns: #>       seqnames    ranges strand |        query   tra #>          <Rle> <IRanges>  <Rle> |    <GRanges> <Rle> #>   [1]     chrA   201-300      - | chrB:201-300  TRUE #>   [2]     chrA   301-400      - | chrC:401-500 FALSE #>   [3]     chrA   401-501      - | chrB:100-200 FALSE #>   ------- #>   seqinfo: 1 sequence from an unspecified genome flagTranslocations(exampleInversion) #> GBreaks object with 3 ranges and 2 metadata columns: #>       seqnames    ranges strand |        query   tra #>          <Rle> <IRanges>  <Rle> |    <GRanges> <Rle> #>   [1]     chrA   100-190      + | chrB:100-190 FALSE #>   [2]     chrA   210-291      - | chrB:210-291 FALSE #>   [3]     chrA   301-400      + | chrB:301-400 FALSE #>   ------- #>   seqinfo: 1 sequence from an unspecified genome flagTranslocations(exampleColinear3) #> GBreaks object with 3 ranges and 2 metadata columns: #>       seqnames    ranges strand |        query   tra #>          <Rle> <IRanges>  <Rle> |    <GRanges> <Rle> #>   [1]     chrA   100-200      + | chrB:100-200 FALSE #>   [2]     chrA   201-300      + | chrB:201-300 FALSE #>   [3]     chrA   301-400      + | chrB:301-400 FALSE #>   ------- #>   seqinfo: 1 sequence from an unspecified genome"},{"path":"https://oist.github.io/GenomicBreaks/reference/flipInversions.html","id":null,"dir":"Reference","previous_headings":"","what":"Flip strand of inversions — flipInversions","title":"Flip strand of inversions — flipInversions","text":"Flip strand inversions","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/flipInversions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flip strand of inversions — flipInversions","text":"","code":"flipInversions(gb)"},{"path":"https://oist.github.io/GenomicBreaks/reference/flipInversions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flip strand of inversions — flipInversions","text":"gb GBreaks object processed flagInversions.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/flipInversions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flip strand of inversions — flipInversions","text":"Returns GBreaks object ranges central part inversion triplet strand orientation flipped. inv metadata column discarded valid anymore.  former inversion triplets now collinear, new inversions may possibly found object coalesced .","code":""},{"path":[]},{"path":"https://oist.github.io/GenomicBreaks/reference/flipInversions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flip strand of inversions — flipInversions","text":"","code":"exampleNestedInversions |> flagInversions() #> GBreaks object with 5 ranges and 2 metadata columns: #>       seqnames    ranges strand |        query   inv #>          <Rle> <IRanges>  <Rle> |    <GRanges> <Rle> #>   [1]     chrA   100-190      + | chrA:100-190 FALSE #>   [2]     chrA   200-290      - | chrA:400-490  TRUE #>   [3]     chrA   300-390      + | chrA:300-390 FALSE #>   [4]     chrA   400-490      - | chrA:200-290 FALSE #>   [5]     chrA   500-590      + | chrA:500-590 FALSE #>   ------- #>   seqinfo: 1 sequence from an unspecified genome flipInversions(exampleNestedInversions |> flagInversions()) #> GBreaks object with 5 ranges and 1 metadata column: #>       seqnames    ranges strand |        query #>          <Rle> <IRanges>  <Rle> |    <GRanges> #>   [1]     chrA   100-190      + | chrA:100-190 #>   [2]     chrA   200-290      - | chrA:400-490 #>   [3]     chrA   300-390      - | chrA:300-390 #>   [4]     chrA   400-490      - | chrA:200-290 #>   [5]     chrA   500-590      + | chrA:500-590 #>   ------- #>   seqinfo: 1 sequence from an unspecified genome"},{"path":"https://oist.github.io/GenomicBreaks/reference/flipStrandNames.html","id":null,"dir":"Reference","previous_headings":"","what":"Reverse order and flip strand — flipStrandNames","title":"Reverse order and flip strand — flipStrandNames","text":"Takes character vector \"strand names\", reverses order elements flips strand.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/flipStrandNames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reverse order and flip strand — flipStrandNames","text":"","code":"flipStrandNames(x)"},{"path":"https://oist.github.io/GenomicBreaks/reference/flipStrandNames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reverse order and flip strand — flipStrandNames","text":"x vector strand names.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/flipStrandNames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reverse order and flip strand — flipStrandNames","text":"Returns class input.","code":""},{"path":[]},{"path":"https://oist.github.io/GenomicBreaks/reference/forceSeqLengths.html","id":null,"dir":"Reference","previous_headings":"","what":"Set sequence lengths if there were none — forceSeqLengths","title":"Set sequence lengths if there were none — forceSeqLengths","text":"Takes GBreaks GRanges object seqlengths available, sets using output guessSeqLengths function.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/forceSeqLengths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set sequence lengths if there were none — forceSeqLengths","text":"","code":"forceSeqLengths(x)  # S4 method for GRanges forceSeqLengths(x)  # S4 method for GBreaks forceSeqLengths(x)"},{"path":"https://oist.github.io/GenomicBreaks/reference/forceSeqLengths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set sequence lengths if there were none — forceSeqLengths","text":"x GBreaks GRanges object.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/forceSeqLengths.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set sequence lengths if there were none — forceSeqLengths","text":"forceSeqLengths returns object sequence lengths set maximal end coordinates found object exist.  GBreaks objects handles target query ranges time.","code":""},{"path":[]},{"path":"https://oist.github.io/GenomicBreaks/reference/forceSeqLengths.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set sequence lengths if there were none — forceSeqLengths","text":"","code":"# Prepare an example object with no seqlengths gb <- exampleTranslocation seqlengths(gb) <-  seqlengths(gb$query) <- NA gb #> GBreaks object with 3 ranges and 1 metadata column: #>       seqnames    ranges strand |        query #>          <Rle> <IRanges>  <Rle> |    <GRanges> #>   [1]     chrA   100-200      + | chrB:100-200 #>   [2]     chrA   201-300      + | chrC:201-300 #>   [3]     chrA   301-400      + | chrB:301-400 #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths  # Note that the new seqlengths returned by forceSeqLengths are shorter # because we can not guess about length of the unaligned ends. forceSeqLengths(gb)  |> seqlengths() #> chrA  #>  400  exampleTranslocation |> seqlengths() #> chrA  #>  600   # forceSeqLengths can take whole GBreaks objects as input, or simple GRanges forceSeqLengths(gb)$query    |> seqlengths() #> chrB chrC  #>  400  300  forceSeqLengths(gb$query)    |> seqlengths() #> chrB chrC  #>  400  300  forceSeqLengths(granges(gb)) |> seqlengths() #> chrA  #>  400"},{"path":"https://oist.github.io/GenomicBreaks/reference/gb2comp.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert GBreaks object to a comparison object — gb2comp","title":"Convert GBreaks object to a comparison object — gb2comp","text":"Convert GBreaks object comparison object","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/gb2comp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert GBreaks object to a comparison object — gb2comp","text":"","code":"gb2comp(gb, color = NULL, ignore.strand = FALSE)"},{"path":"https://oist.github.io/GenomicBreaks/reference/gb2comp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert GBreaks object to a comparison object — gb2comp","text":"gb GBreaks object. color (optional) vector colors, length gb. ignore.strand Ignore strand information?","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/gb2comp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert GBreaks object to a comparison object — gb2comp","text":"Returns genoPlotR::comparison object.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/gb2comp.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Convert GBreaks object to a comparison object — gb2comp","text":"Note comparison objects assume ranges sequence feature.  responsibility input GBreaks object also conforms assumption.","code":""},{"path":[]},{"path":"https://oist.github.io/GenomicBreaks/reference/gb2comp.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert GBreaks object to a comparison object — gb2comp","text":"Charles Plessy","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/gb2comp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert GBreaks object to a comparison object — gb2comp","text":"","code":"gb2comp(exampleInversion) #>   start1 end1 start2 end2 direction      color            col #> 1    100  190    100  190         1 darksalmon     darksalmon #> 2    210  291    291  210        -1 darksalmon cornflowerblue #> 3    301  400    301  400         1 darksalmon     darksalmon"},{"path":"https://oist.github.io/GenomicBreaks/reference/gb2dna_seg.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert GBreaks object to a list of dna_seg objects — gb2dna_seg","title":"Convert GBreaks object to a list of dna_seg objects — gb2dna_seg","text":"Convert GBreaks object list dna_seg objects","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/gb2dna_seg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert GBreaks object to a list of dna_seg objects — gb2dna_seg","text":"","code":"gb2dna_seg(gb, ...)"},{"path":"https://oist.github.io/GenomicBreaks/reference/gb2dna_seg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert GBreaks object to a list of dna_seg objects — gb2dna_seg","text":"gb GRanges GBreaks object. ... Extra arguments passed dna_seg().","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/gb2dna_seg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert GBreaks object to a list of dna_seg objects — gb2dna_seg","text":"Returns list two genoPlotR::dna_seg objects, respectively target ranges query ranges.","code":""},{"path":[]},{"path":"https://oist.github.io/GenomicBreaks/reference/gb2dna_seg.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert GBreaks object to a list of dna_seg objects — gb2dna_seg","text":"Charles Plessy","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/gb2dna_seg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert GBreaks object to a list of dna_seg objects — gb2dna_seg","text":"","code":"gb2dna_seg(exampleInversion) #> $target #>             name start end strand  col fill lty lwd pch cex gene_type #> 1 chrA:100-190:+   100 190      1 blue blue   1   1   8   1    blocks #> 2 chrA:210-291:-   210 291      1 blue blue   1   1   8   1    blocks #> 3 chrA:301-400:+   301 400      1 blue blue   1   1   8   1    blocks #>  #> $query #>           name start end strand  col fill lty lwd pch cex gene_type #> 1 chrB:100-190   100 190      1 blue blue   1   1   8   1    blocks #> 2 chrB:210-291   210 291     -1 blue blue   1   1   8   1    blocks #> 3 chrB:301-400   301 400      1 blue blue   1   1   8   1    blocks #>"},{"path":"https://oist.github.io/GenomicBreaks/reference/gb2xlim.html","id":null,"dir":"Reference","previous_headings":"","what":"GBreaks to xlim — gb2xlim","title":"GBreaks to xlim — gb2xlim","text":"Converts GBreaks object list can passed xlim argument plotApairOfChrs.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/gb2xlim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GBreaks to xlim — gb2xlim","text":"","code":"gb2xlim(gb)"},{"path":"https://oist.github.io/GenomicBreaks/reference/gb2xlim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GBreaks to xlim — gb2xlim","text":"gb GBreaks object.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/gb2xlim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GBreaks to xlim — gb2xlim","text":"list two pairs numbers, first pair start end positions first range GBreaks object target genome second pair start end positions first range, query genome.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/gb2xlim.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"GBreaks to xlim — gb2xlim","text":"function intended run GBreaks objects filtered contain one seqname genome.","code":""},{"path":[]},{"path":"https://oist.github.io/GenomicBreaks/reference/gb2xlim.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"GBreaks to xlim — gb2xlim","text":"Charles Plessy","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/gb2xlim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GBreaks to xlim — gb2xlim","text":"","code":"gb2xlim(exampleColinear) #> [[1]] #> [1] 100 300 #>  #> [[2]] #> [1] 100 300 #>"},{"path":"https://oist.github.io/GenomicBreaks/reference/getRefGenome.html","id":null,"dir":"Reference","previous_headings":"","what":"Attempt to load a BSgenome — getRefGenome","title":"Attempt to load a BSgenome — getRefGenome","text":"Attempt load BSgenome","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/getRefGenome.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Attempt to load a BSgenome — getRefGenome","text":"","code":"getRefGenome(reference.genome)"},{"path":"https://oist.github.io/GenomicBreaks/reference/getRefGenome.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Attempt to load a BSgenome — getRefGenome","text":"reference.genome name genome package (also genome data object)","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/getRefGenome.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Attempt to load a BSgenome — getRefGenome","text":"BSgenome object","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/getRefGenome.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Attempt to load a BSgenome — getRefGenome","text":"Internal function retrieves BSgenome object throws error available. Adapted CAGEr package.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/getRefGenome.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Attempt to load a BSgenome — getRefGenome","text":"Charles Plessy","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/getSeq.html","id":null,"dir":"Reference","previous_headings":"","what":"Get genomic sequences — getSeq","title":"Get genomic sequences — getSeq","text":"Extract sequences genomic ranges GenomicRanges::GRanges GBreaks object.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/getSeq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get genomic sequences — getSeq","text":"","code":"getSeq(x, ...)  # S4 method for GRanges getSeq(x, ...)  # S4 method for GBreaks getSeq(x, ...)"},{"path":"https://oist.github.io/GenomicBreaks/reference/getSeq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get genomic sequences — getSeq","text":"x GBreaks GRanges object. ... Extra arguments (used, present compatibility).","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/getSeq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get genomic sequences — getSeq","text":"Biostrings::DNAStringSet object containing extracted sequence(s).","code":""},{"path":[]},{"path":"https://oist.github.io/GenomicBreaks/reference/getSeq.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get genomic sequences — getSeq","text":"Charles Plessy","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/getSeq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get genomic sequences — getSeq","text":"","code":"Scerevisiae <- BSgenome.Scerevisiae.UCSC.sacCer3::Scerevisiae getSeq(GRanges(\"chrI:1-20\", seqinfo = seqinfo(Scerevisiae))) #> DNAStringSet object of length 1: #>     width seq #> [1]    20 CCACACCACACCCACACACC"},{"path":"https://oist.github.io/GenomicBreaks/reference/get_bps.html","id":null,"dir":"Reference","previous_headings":"","what":"Get breakpoints — get_bps","title":"Get breakpoints — get_bps","text":"Given GBreaks GRanges object, function produces GRanges object detailing breakpoints .","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/get_bps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get breakpoints — get_bps","text":"","code":"get_bps(   gr,   direction = c(\"both\", \"left\", \"right\", \"mid\"),   stranded = FALSE,   sorted = TRUE )"},{"path":"https://oist.github.io/GenomicBreaks/reference/get_bps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get breakpoints — get_bps","text":"gr GRanges object containing pairwise alignment direction Return breakpoints , left right side(s) range, midpoint ranges. stranded TRUE, assign + strand left-side breakpoints - strand right-side ones. sorted Sorts object returning .","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/get_bps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get breakpoints — get_bps","text":"GRanges object breakpoints","code":""},{"path":[]},{"path":"https://oist.github.io/GenomicBreaks/reference/get_bps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get breakpoints — get_bps","text":"","code":"get_bps(exampleInversion) #> GRanges object with 6 ranges and 0 metadata columns: #>       seqnames    ranges strand #>          <Rle> <IRanges>  <Rle> #>   [1]     chrA       100      * #>   [2]     chrA       190      * #>   [3]     chrA       210      * #>   [4]     chrA       291      * #>   [5]     chrA       301      * #>   [6]     chrA       400      * #>   ------- #>   seqinfo: 1 sequence from an unspecified genome get_bps(exampleInversion, direction = \"left\") #> GRanges object with 3 ranges and 0 metadata columns: #>       seqnames    ranges strand #>          <Rle> <IRanges>  <Rle> #>   [1]     chrA       100      * #>   [2]     chrA       210      * #>   [3]     chrA       301      * #>   ------- #>   seqinfo: 1 sequence from an unspecified genome get_bps(exampleInversion, stranded = TRUE) #> GRanges object with 6 ranges and 0 metadata columns: #>       seqnames    ranges strand #>          <Rle> <IRanges>  <Rle> #>   [1]     chrA       100      + #>   [2]     chrA       190      - #>   [3]     chrA       210      + #>   [4]     chrA       291      - #>   [5]     chrA       301      + #>   [6]     chrA       400      - #>   ------- #>   seqinfo: 1 sequence from an unspecified genome get_bps(exampleInversion, direction = \"right\", stranded = TRUE) #> GRanges object with 3 ranges and 0 metadata columns: #>       seqnames    ranges strand #>          <Rle> <IRanges>  <Rle> #>   [1]     chrA       190      - #>   [2]     chrA       291      - #>   [3]     chrA       400      - #>   ------- #>   seqinfo: 1 sequence from an unspecified genome get_bps(exampleInversion, direction = \"mid\") #> GRanges object with 2 ranges and 0 metadata columns: #>       seqnames    ranges strand #>          <Rle> <IRanges>  <Rle> #>   [1]     chrA       200      * #>   [2]     chrA       296      * #>   ------- #>   seqinfo: 1 sequence from an unspecified genome"},{"path":"https://oist.github.io/GenomicBreaks/reference/gr2dna_seg.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert GRanges object to dna_seg format — gr2dna_seg","title":"Convert GRanges object to dna_seg format — gr2dna_seg","text":"genoPlotR::dna_seg class represents DNA segments using data.frame format.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/gr2dna_seg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert GRanges object to dna_seg format — gr2dna_seg","text":"","code":"gr2dna_seg(gr, ...)"},{"path":"https://oist.github.io/GenomicBreaks/reference/gr2dna_seg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert GRanges object to dna_seg format — gr2dna_seg","text":"gr GRanges object. ... Extra arguments passed dna_seg().","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/gr2dna_seg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert GRanges object to dna_seg format — gr2dna_seg","text":"Returns genoPlotR::dna_seq NULL input object length zero.","code":""},{"path":[]},{"path":"https://oist.github.io/GenomicBreaks/reference/gr2dna_seg.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert GRanges object to dna_seg format — gr2dna_seg","text":"Charles Plessy","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/gr2dna_seg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert GRanges object to dna_seg format — gr2dna_seg","text":"","code":"gr2dna_seg(exampleInversion) #>             name start end strand  col fill lty lwd pch cex gene_type #> 1 chrA:100-190:+   100 190      1 blue blue   1   1   8   1    blocks #> 2 chrA:210-291:-   210 291     -1 blue blue   1   1   8   1    blocks #> 3 chrA:301-400:+   301 400      1 blue blue   1   1   8   1    blocks gr2dna_seg(exampleInversion$query) #>           name start end strand  col fill lty lwd pch cex gene_type #> 1 chrB:100-190   100 190      1 blue blue   1   1   8   1    blocks #> 2 chrB:210-291   210 291      1 blue blue   1   1   8   1    blocks #> 3 chrB:301-400   301 400      1 blue blue   1   1   8   1    blocks"},{"path":"https://oist.github.io/GenomicBreaks/reference/guessSeqLengths.html","id":null,"dir":"Reference","previous_headings":"","what":"Guesstimate seqlevel lengths — guessSeqLengths","title":"Guesstimate seqlevel lengths — guessSeqLengths","text":"seqlengths available, one can resort set maximal end coordinate found object.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/guessSeqLengths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Guesstimate seqlevel lengths — guessSeqLengths","text":"","code":"guessSeqLengths(gr)"},{"path":"https://oist.github.io/GenomicBreaks/reference/guessSeqLengths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Guesstimate seqlevel lengths — guessSeqLengths","text":"gr GRanges object","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/guessSeqLengths.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Guesstimate seqlevel lengths — guessSeqLengths","text":"guessSeqLengths returns sequence lengths guessed maximal end coordinates found object, object's seqlengths already exist.","code":""},{"path":[]},{"path":"https://oist.github.io/GenomicBreaks/reference/guessSeqLengths.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Guesstimate seqlevel lengths — guessSeqLengths","text":"Charles Plessy","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/guessSeqLengths.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Guesstimate seqlevel lengths — guessSeqLengths","text":"","code":"exampleTranslocation #> GBreaks object with 3 ranges and 1 metadata column: #>       seqnames    ranges strand |        query #>          <Rle> <IRanges>  <Rle> |    <GRanges> #>   [1]     chrA   100-200      + | chrB:100-200 #>   [2]     chrA   201-300      + | chrC:201-300 #>   [3]     chrA   301-400      + | chrB:301-400 #>   ------- #>   seqinfo: 1 sequence from an unspecified genome seqlengths(exampleTranslocation$query) #> chrB chrC  #>  600  600  guessSeqLengths(exampleTranslocation$query) #> chrB chrC  #>  600  600  gb2 <- exampleTranslocation seqlengths(gb2$query) <- NA guessSeqLengths(gb2$query) #> chrB chrC  #>  400  300"},{"path":"https://oist.github.io/GenomicBreaks/reference/int_frag.html","id":null,"dir":"Reference","previous_headings":"","what":"Integrated intersection of both query and reference subsets on a continuous alignment — int_frag","title":"Integrated intersection of both query and reference subsets on a continuous alignment — int_frag","text":"Integrated intersection query reference subsets continuous alignment","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/int_frag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Integrated intersection of both query and reference subsets on a continuous alignment — int_frag","text":"","code":"int_frag(og_r, og_q, sub_r, sub_q)"},{"path":"https://oist.github.io/GenomicBreaks/reference/int_frag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Integrated intersection of both query and reference subsets on a continuous alignment — int_frag","text":"og_r GRanges object containing refernce genome information original alignment og_q GRanges object containing query genome information original alignment sub_r GRanges object containing reference subset sub_q GRanges object containing query subset","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/int_frag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Integrated intersection of both query and reference subsets on a continuous alignment — int_frag","text":"GRanges object alignment intersected reference query side. Query data held metadata column","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/inv2UCSCData.html","id":null,"dir":"Reference","previous_headings":"","what":"Represent inversions as UCSCData objects — inv2UCSCData","title":"Represent inversions as UCSCData objects — inv2UCSCData","text":"Scan GBreaks object inversions return UCSC track object rtracklayer::UCSCData format export BED12 format command rtracklayer::export(x, \"test.bed\", \"BED\").","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/inv2UCSCData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Represent inversions as UCSCData objects — inv2UCSCData","text":"","code":"inv2UCSCData(gb)"},{"path":"https://oist.github.io/GenomicBreaks/reference/inv2UCSCData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Represent inversions as UCSCData objects — inv2UCSCData","text":"gb GBreaks object.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/inv2UCSCData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Represent inversions as UCSCData objects — inv2UCSCData","text":"Returns UCSCData object.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/isSorted.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if a GBreaks object is sorted — isSorted","title":"Test if a GBreaks object is sorted — isSorted","text":"proper way sort GBreaks object ignoring strand, inversions deletions easily detected visualised.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/isSorted.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if a GBreaks object is sorted — isSorted","text":"","code":"isSorted(x)  # S4 method for GBreaks isSorted(x)"},{"path":"https://oist.github.io/GenomicBreaks/reference/isSorted.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if a GBreaks object is sorted — isSorted","text":"x GBreaks object.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/isSorted.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test if a GBreaks object is sorted — isSorted","text":"Returns TRUE FALSE.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/isSorted.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test if a GBreaks object is sorted — isSorted","text":"","code":"isSorted(exampleInversion) #> [1] TRUE"},{"path":"https://oist.github.io/GenomicBreaks/reference/keepLongestPair.html","id":null,"dir":"Reference","previous_headings":"","what":"Keep the longest pair of features — keepLongestPair","title":"Keep the longest pair of features — keepLongestPair","text":"feature useful analysing genomes comprising main chromosomes extra plasmids smaller chromosomes.  Assuming main chroomosome can detected length, function extracts alignment pair main chromosomes .","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/keepLongestPair.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Keep the longest pair of features — keepLongestPair","text":"","code":"keepLongestPair(gb, drop = FALSE)"},{"path":"https://oist.github.io/GenomicBreaks/reference/keepLongestPair.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Keep the longest pair of features — keepLongestPair","text":"gb GBreaks object drop Drop unused sequence levels.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/keepLongestPair.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Keep the longest pair of features — keepLongestPair","text":"GBreaks object one sequence feature use per genome.","code":""},{"path":[]},{"path":"https://oist.github.io/GenomicBreaks/reference/keepLongestPair.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Keep the longest pair of features — keepLongestPair","text":"Charles Plessy","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/keepLongestPair.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Keep the longest pair of features — keepLongestPair","text":"","code":"exampleTranslocation #> GBreaks object with 3 ranges and 1 metadata column: #>       seqnames    ranges strand |        query #>          <Rle> <IRanges>  <Rle> |    <GRanges> #>   [1]     chrA   100-200      + | chrB:100-200 #>   [2]     chrA   201-300      + | chrC:201-300 #>   [3]     chrA   301-400      + | chrB:301-400 #>   ------- #>   seqinfo: 1 sequence from an unspecified genome exampleTranslocation |> keepLongestPair() #> GBreaks object with 2 ranges and 1 metadata column: #>       seqnames    ranges strand |        query #>          <Rle> <IRanges>  <Rle> |    <GRanges> #>   [1]     chrA   100-200      + | chrB:100-200 #>   [2]     chrA   301-400      + | chrB:301-400 #>   ------- #>   seqinfo: 1 sequence from an unspecified genome"},{"path":"https://oist.github.io/GenomicBreaks/reference/leftInversionGaps.html","id":null,"dir":"Reference","previous_headings":"","what":"Isolate the left-side gaps in inversions — leftInversionGaps","title":"Isolate the left-side gaps in inversions — leftInversionGaps","text":"Isolate left-side gaps inversions","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/leftInversionGaps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Isolate the left-side gaps in inversions — leftInversionGaps","text":"","code":"leftInversionGaps(gb)"},{"path":"https://oist.github.io/GenomicBreaks/reference/leftInversionGaps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Isolate the left-side gaps in inversions — leftInversionGaps","text":"gb GBreaks object.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/leftInversionGaps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Isolate the left-side gaps in inversions — leftInversionGaps","text":"Returns GRanges object representing left-side gaps GBreaks object.","code":""},{"path":[]},{"path":"https://oist.github.io/GenomicBreaks/reference/leftInversionGaps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Isolate the left-side gaps in inversions — leftInversionGaps","text":"","code":"leftInversionGaps(flagInversions(exampleInversion)) #> GRanges object with 1 range and 0 metadata columns: #>       seqnames    ranges strand #>          <Rle> <IRanges>  <Rle> #>   [1]     chrA   191-209      * #>   ------- #>   seqinfo: 1 sequence from an unspecified genome"},{"path":"https://oist.github.io/GenomicBreaks/reference/load_genomic_breaks.html","id":null,"dir":"Reference","previous_headings":"","what":"Load pairwise genome alignments — load_genomic_breaks","title":"Load pairwise genome alignments — load_genomic_breaks","text":"Loads alignments query genome target genome text file General Feature Format 3 (GFF3) Multiple Alignemnt Format (MAF).  convention, target genome one indexed aligner.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/load_genomic_breaks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load pairwise genome alignments — load_genomic_breaks","text":"","code":"load_genomic_breaks(   file,   target_bsgenome = NULL,   query_bsgenome = NULL,   sort = TRUE,   type = \"match_part\" )"},{"path":"https://oist.github.io/GenomicBreaks/reference/load_genomic_breaks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load pairwise genome alignments — load_genomic_breaks","text":"file Path file GFF3 MAF format.  file can compressed gzip. target_bsgenome BSgenome object representing target genome. query_bsgenome BSgenome object representing query genome. sort Returns object sorted, ignoring strand information. type GFF3 files, Sequence Ontology term representing alignment block (default: match_part).","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/load_genomic_breaks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load pairwise genome alignments — load_genomic_breaks","text":"Returns GBreaks object element represents pairwise alignment block.  granges part object contains coordinates target genome, query metadata column contains query coordinates GRanges format.  seqinfo BSgenome object passed parameters copied GRanges objects accordingly.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/load_genomic_breaks.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load pairwise genome alignments — load_genomic_breaks","text":"input GFF3 files, function expects pairwise alignment represented following way: Alignments blocks represented entries specific sequence ontology term type column.  entries discarded.  default type match_part. coordinate system file one target genome. Target tag attribute column contains coordinates match query genome.  (Sorry confusing…) Stand information set query genome coordinates always plus strand.","code":""},{"path":[]},{"path":"https://oist.github.io/GenomicBreaks/reference/load_genomic_breaks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load pairwise genome alignments — load_genomic_breaks","text":"","code":"load_genomic_breaks(system.file(\"extdata/contigs.genome.maf.gz\", package = \"GenomicBreaks\")) #> GBreaks object with 2 ranges and 4 metadata columns: #>         seqnames     ranges strand |     score #>            <Rle>  <IRanges>  <Rle> | <integer> #>   [1] MT192765.1    25-8666      + |     52990 #>   [2] MT192765.1 8882-29829      - |    128566 #>                                             query   aLength   matches #>                                         <GRanges> <integer> <integer> #>   [1]    NODE_2_length_8774_cov_178.827802:6-8647      8642      8642 #>   [2] NODE_1_length_20973_cov_191.628754:26-20973     20948     20945 #>   ------- #>   seqinfo: 1 sequence from an unspecified genome  if (FALSE) { library(\"BSgenome.Scerevisiae.UCSC.sacCer3\") load_genomic_breaks(   system.file(\"extdata/SacCer3__SacPar.gff3.gz\", package = \"GenomicBreaks\"),   target = Scerevisiae,   query = NULL) }"},{"path":"https://oist.github.io/GenomicBreaks/reference/longestMatchesInTarget.html","id":null,"dir":"Reference","previous_headings":"","what":"Find longest matches from target to query genome. — longestMatchesInTarget","title":"Find longest matches from target to query genome. — longestMatchesInTarget","text":"Using GBreaks object representing alignment query genome target genome, finds longest match sequence level (representing contigs, scaffolds, etc.) query target.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/longestMatchesInTarget.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find longest matches from target to query genome. — longestMatchesInTarget","text":"","code":"longestMatchesInTarget(gb, min.width = 10000, min.matches = 2)"},{"path":"https://oist.github.io/GenomicBreaks/reference/longestMatchesInTarget.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find longest matches from target to query genome. — longestMatchesInTarget","text":"gb GBreaks object min.width Minimum width match (query genome) considered. min.matches Discard query sequences fewer longest matches min.matches target.  Default 2, results relevant chaining genomes kept.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/longestMatchesInTarget.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find longest matches from target to query genome. — longestMatchesInTarget","text":"Returns GRangesList object containing one GBreaks object per sequence query genome.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/longestMatchesInTarget.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find longest matches from target to query genome. — longestMatchesInTarget","text":"sequence query represented output, sequences target genome can represented multiple times longest match multiple query genome sequences.  target genome contiguous query genome, major structural variations , reveal arrangements colinear sequences query genome. compact version results, output function can piped strandNames(query = TRUE).","code":""},{"path":[]},{"path":"https://oist.github.io/GenomicBreaks/reference/longestMatchesInTarget.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Find longest matches from target to query genome. — longestMatchesInTarget","text":"Charles Plessy","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/longestMatchesInTarget.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find longest matches from target to query genome. — longestMatchesInTarget","text":"","code":"exampleColinear3 #> GBreaks object with 3 ranges and 1 metadata column: #>       seqnames    ranges strand |        query #>          <Rle> <IRanges>  <Rle> |    <GRanges> #>   [1]     chrA   100-200      + | chrB:100-200 #>   [2]     chrA   201-300      + | chrB:201-300 #>   [3]     chrA   301-400      + | chrB:301-400 #>   ------- #>   seqinfo: 1 sequence from an unspecified genome exampleColinear3 |> longestMatchesInTarget(min.width = 0, min.matches = 1) #> GRangesList object of length 1: #> $chrB #> GBreaks object with 1 range and 1 metadata column: #>       seqnames    ranges strand |        query #>          <Rle> <IRanges>  <Rle> |    <GRanges> #>   [1]     chrB   100-200      + | chrA:100-200 #>   ------- #>   seqinfo: 1 sequence from an unspecified genome #>"},{"path":"https://oist.github.io/GenomicBreaks/reference/makeInversion.chr.html","id":null,"dir":"Reference","previous_headings":"","what":"Make an inversion — makeInversion.chr","title":"Make an inversion — makeInversion.chr","text":"Make inversion","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/makeInversion.chr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make an inversion — makeInversion.chr","text":"","code":"makeInversion.chr(gr, dist = runif)"},{"path":"https://oist.github.io/GenomicBreaks/reference/makeInversion.chr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make an inversion — makeInversion.chr","text":"gr GenomicRanges object dist Distribution function new breakpoints gr's sequence levels.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/makeInversion.chr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make an inversion — makeInversion.chr","text":"","code":"gr <- GRanges(\"chr1:1-1000000:+\") gr2 <- GRanges(c(\"chr1:1-1000000:+\", \"chr2:1-1000000:+\")) gr3 <- GRanges(c(\"chr1:1-1000000:+\", \"chr1:1000000-2000000:+\")) gr4 <- GRanges(c(\"chr1:1-1000000:+\", \"chr1:1000000-2000000:-\")) gr5 <- GRanges(c(\"chr1:1-1000000:-\"))"},{"path":"https://oist.github.io/GenomicBreaks/reference/makeOxfordPlots.html","id":null,"dir":"Reference","previous_headings":"","what":"Make Oxford Plots — makeOxfordPlots","title":"Make Oxford Plots — makeOxfordPlots","text":"Takes GBreaks object prepares Oxford (macrosynteny) coordinates query ranges target ranges concatenating .","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/makeOxfordPlots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make Oxford Plots — makeOxfordPlots","text":"","code":"makeOxfordPlots(   gb,   sp1Name = \"target\",   sp2Name = \"query\",   sp1ChrArms = NULL,   sp2ChrArms = NULL,   type = c(\"line\", \"point\", \"none\"),   size = 1,   diag = TRUE,   col = c(\"seqnames\", \"strand\", \"score\") )"},{"path":"https://oist.github.io/GenomicBreaks/reference/makeOxfordPlots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make Oxford Plots — makeOxfordPlots","text":"gb GBreaks object sp1Name Name first species (default: sp1) sp2Name Name second species (default: sp2) sp1ChrArms GBreaks object chromosome arms sp1 genome sp2ChrArms GBreaks object chromosome arms sp2 genome type type plot (point, line none) size size plotted dots segments. diag Diagonalise plot reordering query sequence levels. col Colour plotted dots lines seqnames, strand score.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/makeOxfordPlots.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make Oxford Plots — makeOxfordPlots","text":"Returns ggplot2 object can modified using + operator.  Use type = 'none' receive object without geom layer.","code":""},{"path":[]},{"path":"https://oist.github.io/GenomicBreaks/reference/makeOxfordPlots.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Make Oxford Plots — makeOxfordPlots","text":"Aleksandra Bliznina Charles Plessy","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/makeOxfordPlots.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make Oxford Plots — makeOxfordPlots","text":"","code":"makeOxfordPlots(exampleTranslocation)  makeOxfordPlots(exampleTranslocation, type = \"p\")"},{"path":"https://oist.github.io/GenomicBreaks/reference/mergeSeqLevels.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge seqlevels in a larger one — mergeSeqLevels","title":"Merge seqlevels in a larger one — mergeSeqLevels","text":"scaffolding plotting purposes, may useful merge sequences larger ones.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/mergeSeqLevels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge seqlevels in a larger one — mergeSeqLevels","text":"","code":"mergeSeqLevels(gr, seqs, name)  mergeSeqLevels_to_DF(gr, seqs, name)"},{"path":"https://oist.github.io/GenomicBreaks/reference/mergeSeqLevels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge seqlevels in a larger one — mergeSeqLevels","text":"gr GRanges object. seqs character vector seqlevels gr name name new sequence level added","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/mergeSeqLevels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge seqlevels in a larger one — mergeSeqLevels","text":"Returns modified GRanges object sequences merged.  seqinfo new entry new level, old levels removed.  seqlengths present original object, arbitrarily set maximal end value seqlevel. mergeSeqLevels_to_DF function returns DataFrame start end columns numeric mode.  cirvumvent fact GenomicRanges object hardcode mode start end positions integer, allow values larger 2,147,483,647, allow merge sequence levels mammalian larger-scale genomes.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/mergeSeqLevels.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Merge seqlevels in a larger one — mergeSeqLevels","text":"careful cases needed \"flip\" sequence feature reverse merging, instance colinearity reverse strand.","code":""},{"path":[]},{"path":"https://oist.github.io/GenomicBreaks/reference/mergeSeqLevels.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Merge seqlevels in a larger one — mergeSeqLevels","text":"Charles Plessy","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/mergeSeqLevels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge seqlevels in a larger one — mergeSeqLevels","text":"","code":"gb       <- GRanges(c(\"XSR:101-180:+\", \"XSR:201-300:+\",  \"XSR:320-400:+\")) gb$query <- GRanges(c( \"S1:101-200\",      \"S2:1-100\",    \"S3:1-100\")) seqlengths(gb$query) <- c(200, 100, 100) genome(gb$query) <- \"GenomeX\" isCircular(gb$query) <- rep(FALSE, 3) seqinfo(gb$query) #> Seqinfo object with 3 sequences from GenomeX genome: #>   seqnames seqlengths isCircular  genome #>   S1              200      FALSE GenomeX #>   S2              100      FALSE GenomeX #>   S3              100      FALSE GenomeX gb <- GBreaks(gb) gb$query <- mergeSeqLevels(gb$query, c(\"S2\", \"S3\"), \"Scaf1\") gb #> GBreaks object with 3 ranges and 1 metadata column: #>       seqnames    ranges strand |         query #>          <Rle> <IRanges>  <Rle> |     <GRanges> #>   [1]      XSR   101-180      + |    S1:101-200 #>   [2]      XSR   201-300      + |   Scaf1:1-100 #>   [3]      XSR   320-400      + | Scaf1:101-200 #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths seqinfo(gb$query) #> Seqinfo object with 4 sequences from GenomeX genome: #>   seqnames seqlengths isCircular  genome #>   Scaf1           200      FALSE GenomeX #>   S1              200      FALSE GenomeX #>   S2              100      FALSE GenomeX #>   S3              100      FALSE GenomeX  mergeSeqLevels(gb, seqlevelsInUse(gb), \"AllMerged\") #> GBreaks object with 3 ranges and 1 metadata column: #>        seqnames    ranges strand |         query #>           <Rle> <IRanges>  <Rle> |     <GRanges> #>   [1] AllMerged   101-180      + |    S1:101-200 #>   [2] AllMerged   201-300      + |   Scaf1:1-100 #>   [3] AllMerged   320-400      + | Scaf1:101-200 #>   ------- #>   seqinfo: 2 sequences from an unspecified genome"},{"path":"https://oist.github.io/GenomicBreaks/reference/orderQuerySeqLevels.html","id":null,"dir":"Reference","previous_headings":"","what":"Ordering permutation for query relative to target — orderQuerySeqLevels","title":"Ordering permutation for query relative to target — orderQuerySeqLevels","text":"Computes permutation rearranges sequence levels query genome reflects order see matches pairwise plot.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/orderQuerySeqLevels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ordering permutation for query relative to target — orderQuerySeqLevels","text":"","code":"orderQuerySeqLevels(gb)  orderQuerySeqLevels_DF_GR(DF, gr)"},{"path":"https://oist.github.io/GenomicBreaks/reference/orderQuerySeqLevels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ordering permutation for query relative to target — orderQuerySeqLevels","text":"gb GBreaks object one sequence level use target genome. DF DataFrame object representing target genome. gr GRanges object representing query genome.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/orderQuerySeqLevels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ordering permutation for query relative to target — orderQuerySeqLevels","text":"Returns integer vector order permutations sequence levels query genome.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/orderQuerySeqLevels.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Ordering permutation for query relative to target — orderQuerySeqLevels","text":"done computing average midpoint position query ranges target genome seqlevel, matched width target ranges, long matches importance.  avoids spurious ordering due short matches subtelomeric regions.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/orderQuerySeqLevels.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Ordering permutation for query relative to target — orderQuerySeqLevels","text":"order makes sense relative single sequence level target genome, function stop error one.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/orderQuerySeqLevels.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Ordering permutation for query relative to target — orderQuerySeqLevels","text":"Charles Plessy","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/orderQuerySeqLevels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ordering permutation for query relative to target — orderQuerySeqLevels","text":"","code":"gb       <- GRanges(c(\"chr1:101-180:+\", \"chr1:201-300:+\",  \"chr1:320-400:+\")) gb$query <- GRanges(c( \"cgt8:1-100\",      \"ctg3:1-100\",    \"ctg5:1-100\")) gb <- GBreaks(gb) # Sort alphabetically as if they were inherited from a BSgenome object seqlevels(gb$query) <- c(\"ctg3\", \"ctg5\", \"cgt8\") seqlevels(gb$query) #> [1] \"ctg3\" \"ctg5\" \"cgt8\" # Sort by match positions on the target genome. seqlevels(gb$query) <- seqlevels(gb$query)[orderQuerySeqLevels(gb)] seqlevels(gb$query) #> [1] \"cgt8\" \"ctg3\" \"ctg5\""},{"path":"https://oist.github.io/GenomicBreaks/reference/pairwiseAlignment.html","id":null,"dir":"Reference","previous_headings":"","what":"Pairwise alignment of genomic ranges — pairwiseAlignment","title":"Pairwise alignment of genomic ranges — pairwiseAlignment","text":"Retrieves DNA sequence GBreaks GRanges objects properly related BSgenome package, aligns Biostrings::pairwiseAlignment function.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/pairwiseAlignment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pairwise alignment of genomic ranges — pairwiseAlignment","text":"","code":"pairwiseAlignment(pattern, subject, ...)  # S4 method for GRanges,GRanges pairwiseAlignment(pattern, subject, ...)  # S4 method for GBreaks,ANY pairwiseAlignment(pattern, subject, ...)"},{"path":"https://oist.github.io/GenomicBreaks/reference/pairwiseAlignment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pairwise alignment of genomic ranges — pairwiseAlignment","text":"pattern GBreaks GRanges object subject GBreaks GRanges object ... Additional arguments passed pairwiseAlignment.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/pairwiseAlignment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pairwise alignment of genomic ranges — pairwiseAlignment","text":"Returns Biostrings::PairwiseAlignments object.","code":""},{"path":[]},{"path":"https://oist.github.io/GenomicBreaks/reference/pairwiseAlignment.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Pairwise alignment of genomic ranges — pairwiseAlignment","text":"Charles Plessy","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/pairwiseAlignment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pairwise alignment of genomic ranges — pairwiseAlignment","text":"","code":"Scerevisiae <- BSgenome.Scerevisiae.UCSC.sacCer3::Scerevisiae # Very arbitrary example gb <- GBreaks( target = GRanges(\"chrI: 1-20\", seqinfo = seqinfo(Scerevisiae))              , query  = GRanges(\"chrI:21-40\", seqinfo = seqinfo(Scerevisiae))) pairwiseAlignment(gb) #> Global PairwiseAlignmentsSingleSubject (1 of 1) #> pattern: C-CACACCACACCCACACACC #> subject: CACACACCACAC-CACACACC #> score: 9.653366"},{"path":"https://oist.github.io/GenomicBreaks/reference/plotApairOfChrs.html","id":null,"dir":"Reference","previous_headings":"","what":"Plots a pair of chromosomes from a GBreaks object. — plotApairOfChrs","title":"Plots a pair of chromosomes from a GBreaks object. — plotApairOfChrs","text":"Plots mapping pair chromosomes using genoPlotR::plot_gene_map function.  One sequence feature (usually chromosome) selected target genome.  corresponding sequence feature query genome either chosen automatically (one largest fraction mappings) given parameter.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/plotApairOfChrs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plots a pair of chromosomes from a GBreaks object. — plotApairOfChrs","text":"","code":"plotApairOfChrs(   gb,   chrT = NULL,   chrQ = NULL,   dna_seg_scale = TRUE,   dna_seg_labels = NULL,   ... )"},{"path":"https://oist.github.io/GenomicBreaks/reference/plotApairOfChrs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plots a pair of chromosomes from a GBreaks object. — plotApairOfChrs","text":"gb GBreaks object. chrT sequence name target genome.  Defaults first sequence level gb object. chrQ (Optional) sequence name query genome.  Defaults longest cumulative match chrT. dna_seg_scale Plot coordinats scale bar (defaults TRUE). dna_seg_labels character vector override default labels sequence names. ... arguments passed plot_gene_map.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/plotApairOfChrs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plots a pair of chromosomes from a GBreaks object. — plotApairOfChrs","text":"Plots active device returns oma::oma_layout object like genoPlotR::plot_gene_map function.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/plotApairOfChrs.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Plots a pair of chromosomes from a GBreaks object. — plotApairOfChrs","text":"kind plot, ranges selected sequence target genome mapped query sequence displayed.","code":""},{"path":[]},{"path":"https://oist.github.io/GenomicBreaks/reference/plotApairOfChrs.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plots a pair of chromosomes from a GBreaks object. — plotApairOfChrs","text":"Charles Plessy","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/plotApairOfChrs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plots a pair of chromosomes from a GBreaks object. — plotApairOfChrs","text":"","code":"plotApairOfChrs(exampleInversion)  plotApairOfChrs(exampleDeletion)   # Labels can be overriden. plotApairOfChrs(exampleDeletion, dna_seg_labels = c(\"over...\", \"...ridden\"))"},{"path":"https://oist.github.io/GenomicBreaks/reference/range.html","id":null,"dir":"Reference","previous_headings":"","what":"Range method for GBreaks objects — range_GBreaks","title":"Range method for GBreaks objects — range_GBreaks","text":"range method GBreaks objects, run GenomicRanges::range target query ranges return new GBreaks object.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/range.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Range method for GBreaks objects — range_GBreaks","text":"","code":"range_GBreaks(   x,   ...,   with.revmap = FALSE,   ignore.strand = FALSE,   na.rm = FALSE )  # S4 method for GBreaks range(x, ..., with.revmap = FALSE, ignore.strand = FALSE, na.rm = FALSE)"},{"path":"https://oist.github.io/GenomicBreaks/reference/range.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Range method for GBreaks objects — range_GBreaks","text":"x GBreaks object. ... etc .revmap FALSE ignore.strand FALSE na.rm FALSE)","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/range.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Range method for GBreaks objects — range_GBreaks","text":"tbd","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/range.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Range method for GBreaks objects — range_GBreaks","text":"range unconditionally ignores strand GBreaks objects.","code":""},{"path":[]},{"path":"https://oist.github.io/GenomicBreaks/reference/range.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Range method for GBreaks objects — range_GBreaks","text":"","code":"range(exampleColinear3) #> GBreaks object with 1 range and 1 metadata column: #>       seqnames    ranges strand |        query #>          <Rle> <IRanges>  <Rle> |    <GRanges> #>   [1]     chrA   100-400      * | chrB:100-400 #>   ------- #>   seqinfo: 1 sequence from an unspecified genome range(exampleDeletion) #> GBreaks object with 2 ranges and 1 metadata column: #>       seqnames    ranges strand |        query #>          <Rle> <IRanges>  <Rle> |    <GRanges> #>   [1]     chrA   100-400      * | chrB:100-300 #>   [2]     chrA   201-300      * | chrC:401-500 #>   ------- #>   seqinfo: 1 sequence from an unspecified genome"},{"path":"https://oist.github.io/GenomicBreaks/reference/readMAF.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a MAF file — readMAF","title":"Read a MAF file — readMAF","text":"Reads pairwise genome alignment MAF format.  file can plain text compressed gzip.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/readMAF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a MAF file — readMAF","text":"","code":"readMAF(inputFileName)"},{"path":"https://oist.github.io/GenomicBreaks/reference/readMAF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a MAF file — readMAF","text":"inputFileName name file read","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/readMAF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a MAF file — readMAF","text":"list object containg coordinates alignments genomes information alignment width number matches.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/readMAF.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read a MAF file — readMAF","text":"Known limitations: expand shell metacharacters.  Trusts blindly file extension determine compression.  perform validation file format.  Assumes score comes first '' lines.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/reverse.html","id":null,"dir":"Reference","previous_headings":"","what":"Reverse genomic ranges — reverse","title":"Reverse genomic ranges — reverse","text":"Reverse genomic ranges flipping strand moving origin coordinate system opposite side.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/reverse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reverse genomic ranges — reverse","text":"","code":"reverse(x, ...)  # S4 method for GRanges reverse(x, ...)  # S4 method for GBreaks reverse(x, query = FALSE, ...)"},{"path":"https://oist.github.io/GenomicBreaks/reference/reverse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reverse genomic ranges — reverse","text":"x GBreaks GRanges object ... Additional arguments (ignored) query GBreaks objects, operate query target.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/reverse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reverse genomic ranges — reverse","text":"Returns modified GBreaks GRanges object.","code":""},{"path":[]},{"path":"https://oist.github.io/GenomicBreaks/reference/reverse.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Reverse genomic ranges — reverse","text":"Charles Plessy","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/reverse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reverse genomic ranges — reverse","text":"","code":"exampleInsertion #> GBreaks object with 3 ranges and 1 metadata column: #>       seqnames    ranges strand |        query #>          <Rle> <IRanges>  <Rle> |    <GRanges> #>   [1]     chrA   100-200      + | chrB:100-200 #>   [2]     chrA   201-300      + | chrB:301-400 #>   [3]     chrC   401-500      + | chrB:201-300 #>   ------- #>   seqinfo: 2 sequences from an unspecified genome reverse(exampleInsertion) #> GBreaks object with 3 ranges and 1 metadata column: #>       seqnames    ranges strand |        query #>          <Rle> <IRanges>  <Rle> |    <GRanges> #>   [1]     chrA   401-501      - | chrB:100-200 #>   [2]     chrA   301-400      - | chrB:301-400 #>   [3]     chrC   101-200      - | chrB:201-300 #>   ------- #>   seqinfo: 2 sequences from an unspecified genome reverse(exampleInsertion, query = TRUE) #> GBreaks object with 3 ranges and 1 metadata column: #>       seqnames    ranges strand |        query #>          <Rle> <IRanges>  <Rle> |    <GRanges> #>   [1]     chrA   100-200      - | chrB:401-501 #>   [2]     chrA   201-300      - | chrB:201-300 #>   [3]     chrC   401-500      - | chrB:301-400 #>   ------- #>   seqinfo: 2 sequences from an unspecified genome"},{"path":"https://oist.github.io/GenomicBreaks/reference/scaf_align_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Alignment of Single Reference Scaffold — scaf_align_plot","title":"Plot Alignment of Single Reference Scaffold — scaf_align_plot","text":"function plots pairwise alignments one reference scaffolds","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/scaf_align_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Alignment of Single Reference Scaffold — scaf_align_plot","text":"","code":"scaf_align_plot(gr_ob, scaf)"},{"path":"https://oist.github.io/GenomicBreaks/reference/scaf_align_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Alignment of Single Reference Scaffold — scaf_align_plot","text":"gr_ob GRanges object containing pairwise alignment scaf Character string name scaffold wish plot","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/scaf_align_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Alignment of Single Reference Scaffold — scaf_align_plot","text":"plot query scaffold alignments chosen reference scaffold","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/scaffoldByFlipAndMerge.html","id":null,"dir":"Reference","previous_headings":"","what":"Guided scaffolding — scaffoldByFlipAndMerge","title":"Guided scaffolding — scaffoldByFlipAndMerge","text":"Guided scaffolding","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/scaffoldByFlipAndMerge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Guided scaffolding — scaffoldByFlipAndMerge","text":"","code":"scaffoldByFlipAndMerge(gr, guide, drop = FALSE)"},{"path":"https://oist.github.io/GenomicBreaks/reference/scaffoldByFlipAndMerge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Guided scaffolding — scaffoldByFlipAndMerge","text":"gr GenomicRanges::GRanges object. guide named list data frames contig names orientations. drop Drop contigs included guide.  new sequence levels order guide.","code":""},{"path":[]},{"path":"https://oist.github.io/GenomicBreaks/reference/scaffoldByFlipAndMerge.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Guided scaffolding — scaffoldByFlipAndMerge","text":"Michael Mansfield Charles Plessy","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/scaffoldByFlipAndMerge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Guided scaffolding — scaffoldByFlipAndMerge","text":"","code":"(gr <- GRanges(c(\"chrB:100-200:+\", \"chrC:201-300:+\",                  \"chrB:301-400:+\", \"chrD:100-200:+\")) |> forceSeqLengths()) #> GRanges object with 4 ranges and 0 metadata columns: #>       seqnames    ranges strand #>          <Rle> <IRanges>  <Rle> #>   [1]     chrB   100-200      + #>   [2]     chrC   201-300      + #>   [3]     chrB   301-400      + #>   [4]     chrD   100-200      + #>   ------- #>   seqinfo: 3 sequences from an unspecified genome (g <- list(   chrD = data.frame(contig = \"chrD\", orientation = 1),   chrBC = data.frame(contig = c(\"chrB\", \"chrC\"), orientation = c(1,-1)))) #> $chrD #>   contig orientation #> 1   chrD           1 #>  #> $chrBC #>   contig orientation #> 1   chrB           1 #> 2   chrC          -1 #>   scaffoldByFlipAndMerge(gr, g, drop = TRUE) #> GRanges object with 4 ranges and 0 metadata columns: #>       seqnames    ranges strand #>          <Rle> <IRanges>  <Rle> #>   [1]     chrD   100-200      + #>   [2]    chrBC   100-200      + #>   [3]    chrBC   301-400      + #>   [4]    chrBC   401-500      - #>   ------- #>   seqinfo: 2 sequences from an unspecified genome"},{"path":"https://oist.github.io/GenomicBreaks/reference/showInversions.html","id":null,"dir":"Reference","previous_headings":"","what":"Show inversions and their flanking blocks. — showInversions","title":"Show inversions and their flanking blocks. — showInversions","text":"Show inversions flanking blocks.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/showInversions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show inversions and their flanking blocks. — showInversions","text":"","code":"showInversions(gb, rename = TRUE)"},{"path":"https://oist.github.io/GenomicBreaks/reference/showInversions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show inversions and their flanking blocks. — showInversions","text":"gb GBreaks object processed flagInversions. rename Replace range names numeric order subsetting.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/showInversions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show inversions and their flanking blocks. — showInversions","text":"Returns GBreaks object ranges part inversion triplet discarded.  object missing inv metadata column, return object discarding ranges.","code":""},{"path":[]},{"path":"https://oist.github.io/GenomicBreaks/reference/showInversions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show inversions and their flanking blocks. — showInversions","text":"","code":"showInversions(flagInversions(exampleInversion)) #> GBreaks object with 3 ranges and 2 metadata columns: #>     seqnames    ranges strand |        query   inv #>        <Rle> <IRanges>  <Rle> |    <GRanges> <Rle> #>   1     chrA   100-190      + | chrB:100-190  TRUE #>   2     chrA   210-291      - | chrB:210-291 FALSE #>   3     chrA   301-400      + | chrB:301-400 FALSE #>   ------- #>   seqinfo: 1 sequence from an unspecified genome"},{"path":"https://oist.github.io/GenomicBreaks/reference/showTranslocations.html","id":null,"dir":"Reference","previous_headings":"","what":"Show translocations and their flanking blocks. — showTranslocations","title":"Show translocations and their flanking blocks. — showTranslocations","text":"Show translocations flanking blocks.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/showTranslocations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show translocations and their flanking blocks. — showTranslocations","text":"","code":"showTranslocations(gb, rename = TRUE)"},{"path":"https://oist.github.io/GenomicBreaks/reference/showTranslocations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show translocations and their flanking blocks. — showTranslocations","text":"gb GBreaks object processed flagTranslocations. rename Replace range names numeric order subsetting.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/showTranslocations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show translocations and their flanking blocks. — showTranslocations","text":"Returns GBreaks object ranges part translocation triplet discarded.  object missing tra metadata column, return object discarding ranges.","code":""},{"path":[]},{"path":"https://oist.github.io/GenomicBreaks/reference/showTranslocations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show translocations and their flanking blocks. — showTranslocations","text":"","code":"showTranslocations(flagTranslocations(exampleTranslocation)) #> GBreaks object with 3 ranges and 2 metadata columns: #>     seqnames    ranges strand |        query   tra #>        <Rle> <IRanges>  <Rle> |    <GRanges> <Rle> #>   1     chrA   100-200      + | chrB:100-200  TRUE #>   2     chrA   201-300      + | chrC:201-300 FALSE #>   3     chrA   301-400      + | chrB:301-400 FALSE #>   ------- #>   seqinfo: 1 sequence from an unspecified genome"},{"path":"https://oist.github.io/GenomicBreaks/reference/splitSeqLevel.html","id":null,"dir":"Reference","previous_headings":"","what":"Split a seqlevel in two pieces — splitSeqLevel","title":"Split a seqlevel in two pieces — splitSeqLevel","text":"scaffolding plotting purposes, may useful split sequences smaller ones.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/splitSeqLevel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split a seqlevel in two pieces — splitSeqLevel","text":"","code":"splitSeqLevel(gb, seq, bp)"},{"path":"https://oist.github.io/GenomicBreaks/reference/splitSeqLevel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split a seqlevel in two pieces — splitSeqLevel","text":"gb GBreaks object. seq one seqlevel gr bp breakpoint split.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/splitSeqLevel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split a seqlevel in two pieces — splitSeqLevel","text":"Returns modified GRanges object sequence split  seqinfo new entry new levels, old level removed.  seqlengths present original object, arbitrarily set maximal end value seqlevel.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/splitSeqLevel.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Split a seqlevel in two pieces — splitSeqLevel","text":"function splits breakpoints.","code":""},{"path":[]},{"path":"https://oist.github.io/GenomicBreaks/reference/splitSeqLevel.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Split a seqlevel in two pieces — splitSeqLevel","text":"Charles Plessy","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/splitSeqLevel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split a seqlevel in two pieces — splitSeqLevel","text":"","code":"splitSeqLevel(exampleInsertion, \"chrA\", 200) #> GBreaks object with 3 ranges and 1 metadata column: #>               seqnames    ranges strand |        query #>                  <Rle> <IRanges>  <Rle> |    <GRanges> #>          chrC     chrC   401-500      + | chrB:201-300 #>   chrA.chrA_1   chrA_1   100-200      + | chrB:100-200 #>   chrA.chrA_2   chrA_2     1-100      + | chrB:301-400 #>   ------- #>   seqinfo: 4 sequences from an unspecified genome"},{"path":"https://oist.github.io/GenomicBreaks/reference/strandNames.html","id":null,"dir":"Reference","previous_headings":"","what":"Sequence name with strand information — strandNames","title":"Sequence name with strand information — strandNames","text":"Extract sequence names pastes strand information .","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/strandNames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sequence name with strand information — strandNames","text":"","code":"strandNames(gb, flip = FALSE, query = FALSE)"},{"path":"https://oist.github.io/GenomicBreaks/reference/strandNames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sequence name with strand information — strandNames","text":"gb GBreaks object GRangesList GBreaks objects. flip Flip strand names. query Work query genome.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/strandNames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sequence name with strand information — strandNames","text":"Returns character vector, list character vectors input GRangesList.","code":""},{"path":[]},{"path":"https://oist.github.io/GenomicBreaks/reference/strandNames.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Sequence name with strand information — strandNames","text":"Charles Plessy","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/strandNames.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sequence name with strand information — strandNames","text":"","code":"strandNames(exampleColinear) #> [1] \"chrA+\" \"chrA+\" strandNames(exampleColinear, query = TRUE) #> [1] \"chrB+\" \"chrB+\""},{"path":"https://oist.github.io/GenomicBreaks/reference/strand_randomisation_index.html","id":null,"dir":"Reference","previous_headings":"","what":"Index measuring how 'random' the alignment strand has become. — strand_randomisation_index","title":"Index measuring how 'random' the alignment strand has become. — strand_randomisation_index","text":"groups species major changes gene order happened genes tended stay chromosome, marked feature strand homologous sequences align appears randomised.  index expresses number.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/strand_randomisation_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Index measuring how 'random' the alignment strand has become. — strand_randomisation_index","text":"","code":"strand_randomisation_index(gb)"},{"path":"https://oist.github.io/GenomicBreaks/reference/strand_randomisation_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Index measuring how 'random' the alignment strand has become. — strand_randomisation_index","text":"gb GBreaks object.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/strand_randomisation_index.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Index measuring how 'random' the alignment strand has become. — strand_randomisation_index","text":"Returns numeric value 0 1.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/strand_randomisation_index.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Index measuring how 'random' the alignment strand has become. — strand_randomisation_index","text":"feature target genome, total length alignments plus strand subtracted total length alignments minus strand.  sign number removed guarantee homologous chromosomes sequenced direction different assemblies.  make features comparable, number normalised total number aligned bases.  , computed numbers target's features averaged weighted mean, weight total number aligned bases feature.  Thus, number close 1 expected closely related genomes.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/strand_randomisation_index.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Index measuring how 'random' the alignment strand has become. — strand_randomisation_index","text":"index designed comparison chromosomal assemblies strong conservation synteny sense homologous genes mapped pairs homologous chromosomes.","code":""},{"path":[]},{"path":"https://oist.github.io/GenomicBreaks/reference/strand_randomisation_index.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Index measuring how 'random' the alignment strand has become. — strand_randomisation_index","text":"","code":"strand_randomisation_index(exampleInversion) #> [1] 0.3992674"},{"path":"https://oist.github.io/GenomicBreaks/reference/subsetByOverlaps.html","id":null,"dir":"Reference","previous_headings":"","what":"subsetByOverlaps method for GBreaks objects — subsetByOverlaps_GBreaks","title":"subsetByOverlaps method for GBreaks objects — subsetByOverlaps_GBreaks","text":"subsetByOverlaps method GBreaks objects, run GenomicRanges::subsetByOverlaps target query ranges return new GBreaks object.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/subsetByOverlaps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"subsetByOverlaps method for GBreaks objects — subsetByOverlaps_GBreaks","text":"","code":"subsetByOverlaps_GBreaks(   x,   ranges,   maxgap = -1L,   minoverlap = 0L,   type = c(\"any\", \"start\", \"end\", \"within\", \"equal\"),   invert = FALSE,   ... )  # S4 method for GBreaks,GBreaks subsetByOverlaps(   x,   ranges,   maxgap = -1L,   minoverlap = 0L,   type = c(\"any\", \"start\", \"end\", \"within\", \"equal\"),   invert = FALSE,   ... )"},{"path":"https://oist.github.io/GenomicBreaks/reference/subsetByOverlaps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"subsetByOverlaps method for GBreaks objects — subsetByOverlaps_GBreaks","text":"x GBreaks object. ranges Another GBreaks object. maxgap tbd minoverlap tbd type tbd invert tbd ... etc","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/subsetByOverlaps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"subsetByOverlaps method for GBreaks objects — subsetByOverlaps_GBreaks","text":"tbd","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/subsetByOverlaps.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"subsetByOverlaps method for GBreaks objects — subsetByOverlaps_GBreaks","text":"range unconditionally ignores strand GBreaks objects.","code":""},{"path":[]},{"path":"https://oist.github.io/GenomicBreaks/reference/subsetByOverlaps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"subsetByOverlaps method for GBreaks objects — subsetByOverlaps_GBreaks","text":"","code":"subsetByOverlaps(exampleColinear3, exampleColinear3) #> GBreaks object with 3 ranges and 1 metadata column: #>       seqnames    ranges strand |        query #>          <Rle> <IRanges>  <Rle> |    <GRanges> #>   [1]     chrA   100-200      + | chrB:100-200 #>   [2]     chrA   201-300      + | chrB:201-300 #>   [3]     chrA   301-400      + | chrB:301-400 #>   ------- #>   seqinfo: 1 sequence from an unspecified genome"},{"path":"https://oist.github.io/GenomicBreaks/reference/swap.html","id":null,"dir":"Reference","previous_headings":"","what":"Swap target and query genomes — swap","title":"Swap target and query genomes — swap","text":"Produce new object information target query genomes inverted.  large number GenomicBreaks functions require GBreaks objects sorted strand information ignored, sort option provided .","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/swap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Swap target and query genomes — swap","text":"","code":"swap(gb, sort = FALSE)"},{"path":"https://oist.github.io/GenomicBreaks/reference/swap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Swap target and query genomes — swap","text":"gb GBreaks object. sort Sort returned object, ignoring strand.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/swap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Swap target and query genomes — swap","text":"new GBreaks object representing input's query ranges, input's target ranges query slot.  strand information unchanged.","code":""},{"path":[]},{"path":"https://oist.github.io/GenomicBreaks/reference/swap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Swap target and query genomes — swap","text":"","code":"swap(exampleDeletion) #> GBreaks object with 3 ranges and 1 metadata column: #>       seqnames    ranges strand |        query #>          <Rle> <IRanges>  <Rle> |    <GRanges> #>   [1]     chrB   100-200      + | chrA:100-200 #>   [2]     chrC   401-500      + | chrA:201-300 #>   [3]     chrB   201-300      + | chrA:301-400 #>   ------- #>   seqinfo: 2 sequences from an unspecified genome swap(exampleDeletion, sort = TRUE) #> GBreaks object with 3 ranges and 1 metadata column: #>       seqnames    ranges strand |        query #>          <Rle> <IRanges>  <Rle> |    <GRanges> #>   [1]     chrB   100-200      + | chrA:100-200 #>   [2]     chrB   201-300      + | chrA:301-400 #>   [3]     chrC   401-500      + | chrA:201-300 #>   ------- #>   seqinfo: 2 sequences from an unspecified genome"},{"path":"https://oist.github.io/GenomicBreaks/reference/synteny_index.html","id":null,"dir":"Reference","previous_headings":"","what":"Index representing how 'syntenic' two genomes are — synteny_index","title":"Index representing how 'syntenic' two genomes are — synteny_index","text":"sequence feature target genome considered ‘syntenic’ alignments map feature query genome, two genomes considered syntenic features syntenic.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/synteny_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Index representing how 'syntenic' two genomes are — synteny_index","text":"","code":"synteny_index(gb)"},{"path":"https://oist.github.io/GenomicBreaks/reference/synteny_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Index representing how 'syntenic' two genomes are — synteny_index","text":"gb GBreaks object.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/synteny_index.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Index representing how 'syntenic' two genomes are — synteny_index","text":"Returns numeric value 0 1.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/synteny_index.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Index representing how 'syntenic' two genomes are — synteny_index","text":"given feature target genome number bases aligned features query genome computed.  largest number taken.  make features comparable, number normalised total number aligned bases.  , computed numbers target's features averaged weighted mean, weight total number aligned bases feature.  Thus, number close 1 expected closely related genomes.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/synteny_index.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Index representing how 'syntenic' two genomes are — synteny_index","text":", definition ‘synteny’ sequences DNA strands, technical terms: sequences feature, regardless strand orientation.","code":""},{"path":[]},{"path":"https://oist.github.io/GenomicBreaks/reference/synteny_index.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Index representing how 'syntenic' two genomes are — synteny_index","text":"","code":"gb       <- GRanges(c(\"Ref:100-200:+\",   \"Ref:400-500:+\",    \"Ref:600-700:+\")) gb$query <- GRanges(c(\"Que:1100-1200:+\", \"Que2:1700-1800:+\", \"Que:1500-1600:+\")) synteny_index(gb) #> [1] 0.6666667"},{"path":"https://oist.github.io/GenomicBreaks/reference/tan_bp.html","id":null,"dir":"Reference","previous_headings":"","what":"Breakpoint proximity to Tandem Repeats — tan_bp","title":"Breakpoint proximity to Tandem Repeats — tan_bp","text":"function classifies breakpoints terms proximity tandem repeats (can generalised property whose coverage binary).","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/tan_bp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Breakpoint proximity to Tandem Repeats — tan_bp","text":"","code":"tan_bp(gr_ob, tan, tol, query_tf = FALSE)"},{"path":"https://oist.github.io/GenomicBreaks/reference/tan_bp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Breakpoint proximity to Tandem Repeats — tan_bp","text":"gr_ob GRanges object containing pairwise alignment tan GRanges object containing tandem repeat (characteristic interest) coverage tol range breakpoints classified \"near\" tandem repeat query_tf logical value , set TRUE, classify bps query coordinates opposed reference (default)","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/tan_bp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Breakpoint proximity to Tandem Repeats — tan_bp","text":"list containing 3 GRanges objects breakpoints far, near within tandem repeats.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/wholeGenomeClassification.html","id":null,"dir":"Reference","previous_headings":"","what":"Whole-genome classification object — wholeGenomeClassification","title":"Whole-genome classification object — wholeGenomeClassification","text":"Classifies aligned genomic regions isolated collinear, unaligned regions breakpoint bridge regions.  bridge regions always flanked collinear alignments isolated alignments always flanked breakpoint regions.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/wholeGenomeClassification.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Whole-genome classification object — wholeGenomeClassification","text":"","code":"wholeGenomeClassification(gb, coa = coalesce_contigs(gb), ends = FALSE)"},{"path":"https://oist.github.io/GenomicBreaks/reference/wholeGenomeClassification.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Whole-genome classification object — wholeGenomeClassification","text":"gb GBreaks object representing one--one whole genome alignment. coa coalesced one--one alignment.  provided, \\ computed --fly coalesce_contigs function. ends Add end region type extremities sequence features covered original alignment.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/wholeGenomeClassification.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Whole-genome classification object — wholeGenomeClassification","text":"GenomicRanges::GRanges object representing target genome, inheriting sequence information (GenomeInfoDb::Seqinfo). class region indicated factor type metadata column.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/wholeGenomeClassification.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Whole-genome classification object — wholeGenomeClassification","text":"strand bridge regions one flanking collinear alignment regions.  Breakpoint end regions unstranded.","code":""},{"path":[]},{"path":"https://oist.github.io/GenomicBreaks/reference/wholeGenomeClassification.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Whole-genome classification object — wholeGenomeClassification","text":"Charles Plessy Michael Mansfield","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/wholeGenomeClassification.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Whole-genome classification object — wholeGenomeClassification","text":"","code":"exampleColinear5 |> wholeGenomeClassification(ends = TRUE) #> GRanges object with 11 ranges and 1 metadata column: #>        seqnames    ranges strand |                type #>           <Rle> <IRanges>  <Rle> |            <factor> #>    [1]     chrA      1-99      * | end region          #>    [2]     chrA   100-190      + | collinear alignment #>    [3]     chrA   191-199      + | bridge region       #>    [4]     chrA   200-290      + | collinear alignment #>    [5]     chrA   291-299      + | bridge region       #>    [6]     chrA   300-390      + | collinear alignment #>    [7]     chrA   391-399      + | bridge region       #>    [8]     chrA   400-490      + | collinear alignment #>    [9]     chrA   491-499      + | bridge region       #>   [10]     chrA   500-590      + | collinear alignment #>   [11]     chrA   591-600      * | end region          #>   ------- #>   seqinfo: 1 sequence from an unspecified genome"},{"path":"https://oist.github.io/GenomicBreaks/reference/zipWithNext.html","id":null,"dir":"Reference","previous_headings":"","what":"Zip elements with the next ones — zipWithNext","title":"Zip elements with the next ones — zipWithNext","text":"Zip object inserting variable number steps.  instance, step 1, b c become ,b, b,c, c,NA.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/zipWithNext.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zip elements with the next ones — zipWithNext","text":"","code":"zipWithNext(x, step = 1)"},{"path":"https://oist.github.io/GenomicBreaks/reference/zipWithNext.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Zip elements with the next ones — zipWithNext","text":"x Object vector structure. step Remove first step entries object zipping .","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/zipWithNext.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Zip elements with the next ones — zipWithNext","text":"S4Vectors::Pairs object copy x first slot, x step elements removed head complemented NAs second slot.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/zipWithNext.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Zip elements with the next ones — zipWithNext","text":"programming pattern use lot package, prepare vectors fro parallel processing.  typically use metadata columns GBreaks objects.  created function always forget use head tail, causes bugs delays development.","code":""},{"path":"https://oist.github.io/GenomicBreaks/reference/zipWithNext.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Zip elements with the next ones — zipWithNext","text":"","code":"zipWithNext(LETTERS, step = 2) #> Pairs object with 26 pairs and 0 metadata columns: #>              first      second #>        <character> <character> #>    [1]           A           C #>    [2]           B           D #>    [3]           C           E #>    [4]           D           F #>    [5]           E           G #>    ...         ...         ... #>   [22]           V           X #>   [23]           W           Y #>   [24]           X           Z #>   [25]           Y        <NA> #>   [26]           Z        <NA>"},{"path":"https://oist.github.io/GenomicBreaks/news/index.html","id":"genomicbreaks-0144","dir":"Changelog","previous_headings":"","what":"GenomicBreaks 0.14.4","title":"GenomicBreaks 0.14.4","text":"Remove dependency BOOST thanks C++ code taken LAST (M. Frith / GPLv3+).","code":""},{"path":[]},{"path":"https://oist.github.io/GenomicBreaks/news/index.html","id":"new-functionalities-0-14-3","dir":"Changelog","previous_headings":"","what":"New functionalities","title":"GenomicBreaks 0.14.3","text":"New scaffoldByFlipAndMerge() splitSeqLevel() functions trivial scaffolding hand.","code":""},{"path":[]},{"path":"https://oist.github.io/GenomicBreaks/news/index.html","id":"new-functionalities-0-14-2","dir":"Changelog","previous_headings":"","what":"New functionalities","title":"GenomicBreaks 0.14.2","text":"New GBreaksToMatrix() function apply image processing approaches scrambling patterns. New keepLongestPair() function focus longest sequence feature genome. New wholeGenomeClassification() function classify isolated alignments, collinear alignments, bridge regions breakpoint regions.","code":""},{"path":[]},{"path":"https://oist.github.io/GenomicBreaks/news/index.html","id":"bug-fixes-0-14-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"GenomicBreaks 0.14.1","text":"Correct 1-nt shift minus-strand coordinates query genome GBreaks objects loaded MAF files. shift cause overlapping ranges crashed coalescing algorithm. bridgeRegions() now returns empty GBreaks objects bridge region found. Closes issue #20. Allow makeOxfordPlots() work genomes larger maximum 32-bit integer. Closes issue #24.","code":""},{"path":"https://oist.github.io/GenomicBreaks/news/index.html","id":"new-functionalities-0-14-1","dir":"Changelog","previous_headings":"","what":"New functionalities","title":"GenomicBreaks 0.14.1","text":"New flipInversions() function remove detected inversions searching nested ones. New filterDoubleInversions() function extracting double inversions.","code":""},{"path":"https://oist.github.io/GenomicBreaks/news/index.html","id":"genomicbreaks-0140","dir":"Changelog","previous_headings":"","what":"GenomicBreaks 0.14.0","title":"GenomicBreaks 0.14.0","text":"load_genomic_breaks() function gains support files Multiple Alignment Format (MAF).","code":""},{"path":[]},{"path":"https://oist.github.io/GenomicBreaks/news/index.html","id":"new-functionalities-0-13-1","dir":"Changelog","previous_headings":"","what":"New functionalities","title":"GenomicBreaks 0.13.1","text":"makeOxfordPlots() function gains col argument choosing color strand score.","code":""},{"path":"https://oist.github.io/GenomicBreaks/news/index.html","id":"bug-fixes-0-13-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"GenomicBreaks 0.13.1","text":"makeOxfordPlots(), sequence names now centered region.","code":""},{"path":[]},{"path":"https://oist.github.io/GenomicBreaks/news/index.html","id":"important-bug-fixes-0-13-0","dir":"Changelog","previous_headings":"","what":"Important bug fixes","title":"GenomicBreaks 0.13.0","text":"flagColinearAlignments() coalesce_contigs() functions corrected strandless ranges called colinear satisfy conditions strand. , treated like plus-strand ranges, causing failure detect colinearity minus strand.","code":""},{"path":"https://oist.github.io/GenomicBreaks/news/index.html","id":"new-functionalities-0-13-0","dir":"Changelog","previous_headings":"","what":"New functionalities","title":"GenomicBreaks 0.13.0","text":"New getSeq() method GRanges GBreaks objects proper seqinfo installed BSgenome package. New pairwiseAlignment() method GRanges GBreaks objects, call getSeq() automatically. New “mid” option direction argument get_bps(), output breakpoints mid-distance ranges. New bridgeRegions() function maps unaligned regions target query genome flanked colinear regions. filterTranslocations() gains remove flag flagTranslocations gains flag. swap gains sort flag, interactive sessions, gb |> swap() |> sort(=T) can replaced shorter gb |> swap(s = T).","code":""},{"path":"https://oist.github.io/GenomicBreaks/news/index.html","id":"backwards-incompatible-changes-0-13-0","dir":"Changelog","previous_headings":"","what":"Backwards-incompatible changes","title":"GenomicBreaks 0.13.0","text":"function bp_heatmap now expects genome sequences reachable via BSgenome::getBSgenome. function dist2next now operates GRanges GBreaks, main argument renamed x.","code":""},{"path":[]},{"path":"https://oist.github.io/GenomicBreaks/news/index.html","id":"new-functionalities-0-12-2","dir":"Changelog","previous_headings":"","what":"New functionalities","title":"GenomicBreaks 0.12.2","text":"function forceSeqLevels() now operates target query ranges GBreaks objects. New example data set: Neurospora crassa chromosome III aligned homologue Podospora comata: chromosome 7. New strand_randomisation_index(). makeOxfordPlots() includes strand information returned object. New type = 'none' option makeOxfordPlots(), better customisation.","code":""},{"path":"https://oist.github.io/GenomicBreaks/news/index.html","id":"genomicbreaks-0121","dir":"Changelog","previous_headings":"","what":"GenomicBreaks 0.12.1","title":"GenomicBreaks 0.12.1","text":"plotApairOfChrs() function now plots name selected sequence levels instead target query. labels can overriden dna_seg_labels parameters. Closes issue #6.","code":""},{"path":[]},{"path":"https://oist.github.io/GenomicBreaks/news/index.html","id":"backwards-incompatible-changes-0-12-0","dir":"Changelog","previous_headings":"","what":"Backwards-incompatible changes","title":"GenomicBreaks 0.12.0","text":"Removed selChroms parameter makeOxfordPlots(). New defaults makeOxfordPlots(): fixed-ratio line plot round ends size 1. Axis labels now “target” “query” default. case, Seqname displayed instead genome name one sequence ranges object.","code":""},{"path":"https://oist.github.io/GenomicBreaks/news/index.html","id":"new-functionalities-0-12-0","dir":"Changelog","previous_headings":"","what":"New functionalities","title":"GenomicBreaks 0.12.0","text":"New function orderQuerySeqLevels() better diagonalise dot plots. New diag parameter makeOxfordPlots() diagonalise plots re-ordering query sequence levels. New size parameter makeOxfordPlots() New guessSeqLengths() forceSeqLengths() functions use last ressort sequence lengths known.","code":""},{"path":[]},{"path":"https://oist.github.io/GenomicBreaks/news/index.html","id":"backwards-incompatible-changes-0-11-0","dir":"Changelog","previous_headings":"","what":"Backwards-incompatible changes","title":"GenomicBreaks 0.11.0","text":"Remove project-specific load_one_to_ones function.","code":""},{"path":[]},{"path":"https://oist.github.io/GenomicBreaks/news/index.html","id":"backwards-incompatible-changes-0-10-0","dir":"Changelog","previous_headings":"","what":"Backwards-incompatible changes","title":"GenomicBreaks 0.10.0","text":"Removed flagInsersions, redundant flagTranslocations() buggy minus strands. plotApairOfChrs() now plots coordinates scale bar default.","code":""},{"path":"https://oist.github.io/GenomicBreaks/news/index.html","id":"new-functionalities-0-10-0","dir":"Changelog","previous_headings":"","what":"New functionalities","title":"GenomicBreaks 0.10.0","text":"New flagPairs() function exhaustively flag windows 2 successive GBreaks entries. New gb2xlim() function narrow focus plots made plotApairOfChrs(). New makeOxfordPlots() function create macrosynteny plots. Thanks Aleksandra Bliznina. mergeSeqLevels(), use maximal end value seqlevel seqlengths provided. new set example 5-uplets, illustrate double inversions. Flag double inversions flagDoubleInversions() flagAll(), test exampleDoubleInversion.","code":""},{"path":"https://oist.github.io/GenomicBreaks/news/index.html","id":"bug-fixes-0-10-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"GenomicBreaks 0.10.0","text":"Add strand check flagTranslocations() return false positive exampleDoubleInversion.","code":""},{"path":[]},{"path":"https://oist.github.io/GenomicBreaks/news/index.html","id":"new-functionalities-0-9-1","dir":"Changelog","previous_headings":"","what":"New functionalities","title":"GenomicBreaks 0.9.1","text":"flagAll() now ensures flags collide, reports translocations.","code":""},{"path":[]},{"path":"https://oist.github.io/GenomicBreaks/news/index.html","id":"new-functionalities-0-9-0","dir":"Changelog","previous_headings":"","what":"New functionalities","title":"GenomicBreaks 0.9.0","text":"New functions flagTranslocations(), showTranslocations() filterTranslocations(). New filterColinearRegions() function. New cleanGaps() function guaranteed return intervals input ranges. GBreaks() constructor now accepts three new parameters, target, query strand, construct GBreaks objects directly GRanges objects. New range() methods GBreaks objects, runs GRanges::range pair target/query seqnames, ignoring strand information. New subsetByOverlaps() range combines regions overlapping target query ranges.","code":""},{"path":"https://oist.github.io/GenomicBreaks/news/index.html","id":"bug-fixes-0-9-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"GenomicBreaks 0.9.0","text":"flagColinearAlignments() now handles properly strandless ranges. (Issue #1) swap() now returns proper GBreaks() objects.","code":""},{"path":[]},{"path":"https://oist.github.io/GenomicBreaks/news/index.html","id":"backwards-incompatible-changes-0-8-0","dir":"Changelog","previous_headings":"","what":"Backwards-incompatible changes","title":"GenomicBreaks 0.8.0","text":"Remove flagInterruptions, nonsense.","code":""},{"path":"https://oist.github.io/GenomicBreaks/news/index.html","id":"new-functionalities-0-8-0","dir":"Changelog","previous_headings":"","what":"New functionalities","title":"GenomicBreaks 0.8.0","text":"New isSorted() method properly test ignore.strand set TRUE. Default plotApairOfChrs() first sequence level GBreaks object. plotApairOfChrs() now renders regions blocks arrows strand information encoded color shape comparison bands. also plots light blue blocks matched. Closes issues #3 #5. Added example data, see ?StructuralVariants `vignette(“Structural Variants”, package = “GenomicBreaks”) details.","code":""},{"path":"https://oist.github.io/GenomicBreaks/news/index.html","id":"bug-fixes-0-8-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"GenomicBreaks 0.8.0","text":"flagInversions(), check input sorted. Closes Issue #2. flagLongShort() now handles case annotations match.","code":""},{"path":"https://oist.github.io/GenomicBreaks/news/index.html","id":"genomicbreaks-071","dir":"Changelog","previous_headings":"","what":"GenomicBreaks 0.7.1","title":"GenomicBreaks 0.7.1","text":"Fix namespace variable bugs preventing reverse() run.","code":""},{"path":"https://oist.github.io/GenomicBreaks/news/index.html","id":"genomicbreaks-070","dir":"Changelog","previous_headings":"","what":"GenomicBreaks 0.7.0","title":"GenomicBreaks 0.7.0","text":"New mergeSeqLevels() function concatenate sequence features, instance plotting. New reverse() method GBreaks GRanges objects. Really return GBreaks object coalesce_contigs(). Pass extra arguments plotApairOfChrs() genoPlotR::plot_gene_map.","code":""},{"path":"https://oist.github.io/GenomicBreaks/news/index.html","id":"genomicbreaks-060","dir":"Changelog","previous_headings":"","what":"GenomicBreaks 0.6.0","title":"GenomicBreaks 0.6.0","text":"Add pairwise chromosome plot functions using genoPlotR package, see particular plotApairOfChrs().","code":""},{"path":"https://oist.github.io/GenomicBreaks/news/index.html","id":"genomicbreaks-053","dir":"Changelog","previous_headings":"","what":"GenomicBreaks 0.5.3","title":"GenomicBreaks 0.5.3","text":"pkgdown update.","code":""},{"path":"https://oist.github.io/GenomicBreaks/news/index.html","id":"genomicbreaks-052","dir":"Changelog","previous_headings":"","what":"GenomicBreaks 0.5.2","title":"GenomicBreaks 0.5.2","text":"Greatly speed flagLongShort().","code":""},{"path":"https://oist.github.io/GenomicBreaks/news/index.html","id":"genomicbreaks-051","dir":"Changelog","previous_headings":"","what":"GenomicBreaks 0.5.1","title":"GenomicBreaks 0.5.1","text":"Correct variable name bug flagLongShort(). Export GBreaks() constructor.","code":""},{"path":"https://oist.github.io/GenomicBreaks/news/index.html","id":"genomicbreaks-050","dir":"Changelog","previous_headings":"","what":"GenomicBreaks 0.5.0","title":"GenomicBreaks 0.5.0","text":"Add flagLongShort() function transfer annotations chromosome arms.","code":""},{"path":"https://oist.github.io/GenomicBreaks/news/index.html","id":"genomicbreaks-040","dir":"Changelog","previous_headings":"","what":"GenomicBreaks 0.4.0","title":"GenomicBreaks 0.4.0","text":"Use alignments Saccharomyces paradoxus S. cerevisiae example data. Addition GOC() function calculate Gene Order Conservation.","code":""},{"path":"https://oist.github.io/GenomicBreaks/news/index.html","id":"genomicbreaks-030","dir":"Changelog","previous_headings":"","what":"GenomicBreaks 0.3.0","title":"GenomicBreaks 0.3.0","text":"Added leftInversionGaps() function.","code":""},{"path":"https://oist.github.io/GenomicBreaks/news/index.html","id":"genomicbreaks-020","dir":"Changelog","previous_headings":"","what":"GenomicBreaks 0.2.0","title":"GenomicBreaks 0.2.0","text":"Document package pkgdown.","code":""}]
